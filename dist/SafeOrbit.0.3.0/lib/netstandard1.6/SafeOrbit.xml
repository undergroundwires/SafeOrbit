<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SafeOrbit</name>
    </assembly>
    <members>
        <member name="T:SafeOrbit.Cryptography.Encryption.AesEncryptor">
            <summary>
                <p><see cref="T:SafeOrbit.Cryptography.Encryption.AesEncryptor" /> encryption implementation is designed to be slow.</p>
                <p>
                    Use it if you prefer stronger security over performance. Prefer <see cref="T:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor" /> if you want a
                    faster
                    alternative.
                </p>
                <p>
                    An implementation of AES 512 using a slow <see cref="T:SafeOrbit.Cryptography.Encryption.Kdf.IKeyDerivationFunction" /> so as to frustrate
                    brute-force attack or dictionary attack on the password or passphrase input value.
                </p>
            </summary>
            <example>
                <code>
            </code>
            </example>
            <seealso cref="F:SafeOrbit.Cryptography.Encryption.AesEncryptor.Padding" />
            <seealso cref="F:SafeOrbit.Cryptography.Encryption.AesEncryptor.Mode" />
            <seealso cref="F:SafeOrbit.Cryptography.Encryption.AesEncryptor.KeySize" />
            <seealso cref="T:SafeOrbit.Cryptography.Encryption.Kdf.IKeyDerivationFunction" />
            <seealso cref="T:SafeOrbit.Cryptography.Encryption.ISafeEncryptor" />
        </member>
        <member name="F:SafeOrbit.Cryptography.Encryption.AesEncryptor.Padding">
            <summary> Gets the padding to apply when the message data block is shorter than the full number of bytes needed for a cryptographic operation. </summary>
        </member>
        <member name="F:SafeOrbit.Cryptography.Encryption.AesEncryptor.Mode">
            <summary> Gets the mode of the encryption operation. </summary>
        </member>
        <member name="F:SafeOrbit.Cryptography.Encryption.AesEncryptor.KeySize">
            <summary> Gets or sets the size, in bits, of the secret key. </summary>
            <remarks> The minimum size of the key is 128 bits, and the maximum size is 256 bits. </remarks>
        </member>
        <member name="P:SafeOrbit.Cryptography.Encryption.AesEncryptor.BlockSize">
            <inheritdoc />
            <summary>
                <p>Gets the size of the block in bits.</p>
                <p>The block size for AES is always 128 bits.</p>
            </summary>
            <value>The size of the block in bits.</value>
            <remarks>https://en.wikipedia.org/wiki/Advanced_Encryption_Standard</remarks>
        </member>
        <member name="F:SafeOrbit.Cryptography.Encryption.AesEncryptor._keyDeriver">
            <summary>
                The key derivation function to strengthen the key.
            </summary>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.AesEncryptor.Encrypt(System.Byte[],System.Byte[],System.Byte[])">
            <exception cref="T:System.ArgumentNullException"><paramref name="input" /> is <see langword="null" /> or empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is <see langword="null" /> or empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="salt" /> is <see langword="null" /> or empty.</exception>
            <exception cref="T:SafeOrbit.Exceptions.KeySizeException">
                Length of the <paramref name="key" /> must be between <see cref="P:SafeOrbit.Cryptography.Encryption.AesEncryptor.MinKeySize" /> and
                <see cref="P:SafeOrbit.Cryptography.Encryption.AesEncryptor.MaxKeySize" /> values.
            </exception>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.AesEncryptor.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
            <exception cref="T:System.ArgumentNullException"><paramref name="input" /> is <see langword="null" /> or empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is <see langword="null" /> or empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="salt" /> is <see langword="null" /> or empty.</exception>
            <exception cref="T:SafeOrbit.Exceptions.KeySizeException">
                Length of the <paramref name="key" /> must be between <see cref="P:SafeOrbit.Cryptography.Encryption.AesEncryptor.MinKeySize" /> and
                <see cref="P:SafeOrbit.Cryptography.Encryption.AesEncryptor.MaxKeySize" /> values.
            </exception>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.AesEncryptor.EncryptAsync(System.Byte[],System.Byte[],System.Byte[])">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException"><paramref name="input" /> is <see langword="null" /> or empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is <see langword="null" /> or empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="salt" /> is <see langword="null" /> or empty.</exception>
            <exception cref="T:SafeOrbit.Exceptions.KeySizeException">
                Length of the <paramref name="key" /> must be between <see cref="P:SafeOrbit.Cryptography.Encryption.AesEncryptor.MinKeySize" /> and
                <see cref="P:SafeOrbit.Cryptography.Encryption.AesEncryptor.MaxKeySize" /> values.
            </exception>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.AesEncryptor.DecryptAsync(System.Byte[],System.Byte[],System.Byte[])">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException"><paramref name="input" /> is <see langword="null" /> or empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is <see langword="null" /> or empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="salt" /> is <see langword="null" /> or empty.</exception>
            <exception cref="T:SafeOrbit.Exceptions.KeySizeException">
                Length of the <paramref name="key" /> must be between <see cref="P:SafeOrbit.Cryptography.Encryption.AesEncryptor.MinKeySize" /> and
                <see cref="P:SafeOrbit.Cryptography.Encryption.AesEncryptor.MaxKeySize" /> values.
            </exception>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.AesEncryptor.ValidateParameters(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
                Ensures the parameters are valid.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="input" /> is <see langword="null" /> or empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is <see langword="null" /> or empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="salt" /> is <see langword="null" /> or empty.</exception>
            <exception cref="T:SafeOrbit.Exceptions.KeySizeException">
                Length of the <paramref name="key" /> must be between <see cref="P:SafeOrbit.Cryptography.Encryption.AesEncryptor.MinKeySize" /> and
                <see cref="P:SafeOrbit.Cryptography.Encryption.AesEncryptor.MaxKeySize" /> values.
            </exception>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.AesEncryptor.GetAlgorithm(System.Byte[])">
            <summary>
                Derives the <paramref name="key" /> and gets the cryptographic algorithm.
            </summary>
            <param name="key">The key that'll be derived.</param>
            <seealso cref="F:SafeOrbit.Cryptography.Encryption.AesEncryptor.Padding" />
            <seealso cref="F:SafeOrbit.Cryptography.Encryption.AesEncryptor.Mode" />
            <seealso cref="F:SafeOrbit.Cryptography.Encryption.AesEncryptor.KeySize" />
        </member>
        <member name="T:SafeOrbit.Cryptography.Encryption.Kdf.IKeyDerivationFunction">
            <summary>
                <p></p>An interface defining a key deriver function.
                <p>More: https://en.wikipedia.org/wiki/Key_derivation_function </p>
            </summary>
            <remarks>
                <p>
                    Key derivation functions are in applications to derive keys from secret passwords or passphrases,
                    which typically do not have the desired properties to be used directly as cryptographic keys. In such
                    applications, it is generally recommended that the key derivation function be made deliberately slow so as to
                    frustrate brute-force attack or dictionary attack on the password or passphrase input value.
                </p>
                <p>DK = KDF(Key,Salt,Iterations)</p>
            </remarks>
        </member>
        <member name="P:SafeOrbit.Cryptography.Encryption.Kdf.IKeyDerivationFunction.TotalIterations">
            <summary>
                <p>Gets the total iterations. </p>
                <p>
                    The difficulty of a brute force attack increases with the number of iterations. A practical limit on the
                    iteration count is the unwillingness of users to tolerate a perceptible delay in logging in to a computer or
                    seeing a decrypted message. The use of salt prevents the attackers from precomputing a dictionary of derived
                    keys.
                </p>
            </summary>
            <value>The total iterations.</value>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.Kdf.IKeyDerivationFunction.Derive(System.Byte[],System.Byte[],System.Int32)">
            <summary>
                Uses key derivation function to strengthen the given <paramref name="key" />.
            </summary>
            <param name="key">The original key or password</param>
            <param name="salt">The cryptographic salt</param>
            <param name="length">The length of the derived bytes.</param>
            <returns>The derived key</returns>
        </member>
        <member name="T:SafeOrbit.Cryptography.Encryption.Kdf.Pbkdf2KeyDeriver">
            <summary>
                An wrapper for <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" />
            </summary>
            <seealso cref="T:SafeOrbit.Cryptography.Encryption.Kdf.IKeyDerivationFunction" />
        </member>
        <member name="F:SafeOrbit.Cryptography.Encryption.Kdf.Pbkdf2KeyDeriver.DefaultTotalIterations">
            <summary>
                The difficulty of a brute force attack increases with the number of iterations. A practical limit on the iteration
                count is the unwillingness of users to tolerate a perceptible delay in logging in to a computer or seeing a
                decrypted message. The use of salt prevents the attackers from precomputing a dictionary of derived keys.
            </summary>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.Kdf.Pbkdf2KeyDeriver.Derive(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Uses key derivation function to strengthen the given <paramref name="key" />.
            </summary>
            <param name="key">The master password from which a derived key is generated,</param>
            <param name="salt">The cryptographic salt.</param>
            <param name="length">The length of the derived bytes.</param>
            <returns>The derived key</returns>
        </member>
        <member name="T:SafeOrbit.Cryptography.Encryption.BlowfishCbc">
            <inheritdoc />
            <summary>
                Blowfish implementation with <see cref="F:System.Security.Cryptography.CipherMode.CBC" />
            </summary>
            <seealso cref="T:System.Security.Cryptography.ICryptoTransform" />
            <seealso cref="F:System.Security.Cryptography.CipherMode.CBC" />
            <seealso cref="T:SafeOrbit.Cryptography.Encryption.BlowfishEcb" />
            <seealso cref="T:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor" />
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishCbc.#ctor(System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SafeOrbit.Cryptography.Encryption.BlowfishCbc"/> class.
            </summary>
            <param name="cipherKey">The cipher key.</param>
            <param name="iv">The iv.</param>
            <param name="forEncryption">if set to <c>true</c> [for encryption].</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="cipherKey" /> is <see langword="null" />.</exception>>
            <exception cref="T:SafeOrbit.Exceptions.KeySizeException"><paramref name="cipherKey" /> is must be between 32 bits (4 bytes) and 488 bits (56) size.</exception>>
            <exception cref="T:System.ArgumentNullException"><paramref name="iv" /> is <see langword="null" />.</exception>>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishCbc.XorBlock(System.Byte[]@,System.Byte[])">
            <summary>
                XoR encrypts two 8 bit blocks
            </summary>
            <param name="block">8 bit block 1</param>
            <param name="iv">8 bit block 2</param>
        </member>
        <member name="T:SafeOrbit.Cryptography.Encryption.BlowfishEcb">
            <summary>
                Blowfish implementation with <see cref="F:System.Security.Cryptography.CipherMode.ECB"/>.
                <b>ECB</b> mode encrypts each block of data with the same key, so patterns in a large set of data will be visible.
            </summary>
            <seealso cref="T:System.Security.Cryptography.ICryptoTransform" />
            <seealso cref="F:System.Security.Cryptography.CipherMode.ECB"/>
            <seealso cref="T:SafeOrbit.Cryptography.Encryption.BlowfishCbc"/>
            <seealso cref="T:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor"/>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishEcb.#ctor(System.Byte[],System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:SafeOrbit.Cryptography.Encryption.BlowfishEcb" /> class.
            </summary>
            <param name="cipherKey">The cipher key.</param>
            <param name="forEncryption">if set to <c>true</c> then the blocks will be encrypted; otherwise: they'll be decrypted.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="cipherKey" /> is <see langword="null" />.</exception>
            >
            <exception cref="T:SafeOrbit.Exceptions.KeySizeException">
                <paramref name="cipherKey" /> is must be between 32 bits (4 bytes) and 488 bits (56)
                size.
            </exception>
            >
        </member>
        <member name="P:SafeOrbit.Cryptography.Encryption.BlowfishEcb.ForEncryption">
            <summary>
            Gets a value indicating whether this instance is configured for encryption or decryption.
            </summary>
            <value><c>true</c> if for encryption;  <c>false</c> if for decryption.</value>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishEcb.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
                Encrypt/decrypts the block.
            </summary>
            <param name="inputBuffer">The input buffer.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputCount">The input count.</param>
            <param name="outputBuffer">The output buffer.</param>
            <param name="outputOffset">The output offset.</param>
            <returns>The length of the processed bytes.</returns>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishEcb.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Transforms the final block.
            </summary>
            <param name="inputBuffer">The input buffer.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputCount">The input count.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishEcb.SetupKey(System.Byte[])">
            <summary>
                Sets up the S-blocks and the key
            </summary>
            <param name="cipherKey">Block cipher key (1-448 bits)</param>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishEcb.BlockEncrypt(System.Byte[]@)">
            <summary>
                Encrypts a 64 bit block
            </summary>
            <param name="block">The 64 bit block to encrypt</param>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishEcb.BlockDecrypt(System.Byte[]@)">
            <summary>
                Decrypts a 64 bit block
            </summary>
            <param name="block">The 64 bit block to decrypt</param>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishEcb.SetBlock(System.Byte[])">
            <summary>
                Splits the block into the two uint values
            </summary>
            <param name="block">the 64 bit block to setup</param>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishEcb.GetBlock(System.Byte[]@)">
            <summary>
                Converts the two uint values into a 64 bit block
            </summary>
            <param name="block">64 bit buffer to receive the block</param>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishEcb.encipher">
            <summary>
                Runs the blowfish algorithm (standard 16 rounds)
            </summary>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishEcb.decipher">
            <summary>
                Runs the blowfish algorithm in reverse (standard 16 rounds)
            </summary>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishEcb.round(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
                one round of the blowfish algorithm
            </summary>
            <param name="a">See spec</param>
            <param name="b">See spec</param>
            <param name="n">See spec</param>
            <returns></returns>
        </member>
        <member name="F:SafeOrbit.Cryptography.Encryption.BlowfishCipherMode.Ecb">
            <summary>
                <p>
                    This is the fastest mode. It's not safe at all and it should only be used on very small
                    or random generated data.
                </p>
            </summary>
            <remarks>
                The Electronic Codebook (<b>ECB</b>) mode encrypts each block individually. Any blocks of plain text that are
                identical and in the same message, or that are in a different message encrypted with the same key, will be
                transformed into identical cipher text blocks. <b>Important:</b>  This mode is not recommended because it opens the
                door for multiple security exploits. If the plain text to be encrypted contains substantial repetition, it is
                feasible for the cipher text to be broken one block at a time. It is also possible to use block analysis to
                determine the encryption key. Also, an active adversary can substitute and exchange individual blocks without
                detection, which allows blocks to be saved and inserted into the stream at other points without detection.
            </remarks>
        </member>
        <member name="F:SafeOrbit.Cryptography.Encryption.BlowfishCipherMode.Cbc">
            <summary>
                The Cipher Block Chaining (<b>CBC</b>) mode introduces feedback. Before each plain text block is encrypted, it is
                combined with the cipher text of the previous block by a bitwise exclusive OR operation. This ensures that even if
                the plain text contains many identical blocks, they will each encrypt to a different cipher text block. The
                initialization vector is combined with the first plain text block by a bitwise exclusive OR operation before the
                block is encrypted. If a single bit of the cipher text block is mangled, the corresponding plain text block will
                also be mangled. In addition, a bit in the subsequent block, in the same position as the original mangled bit, will
                be mangled.
            </summary>
        </member>
        <member name="T:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor">
            <summary>
                <p>
                    Block cipher: 64-bit block
                    Variable key length: 32 bits to 448 bits
                    Much faster than DES and IDEA.
                </p>
            </summary>
            <remarks>
                <p>
                    Blowfish is a fast block cipher, except when changing keys. Each new key requires pre-processing equivalent to
                    encrypting about 4 kilobytes of text, which is very slow compared to other block ciphers. This prevents its use
                    in certain applications, but is not a problem in others.
                    More : https://en.wikipedia.org/wiki/Blowfish_(cipher)#Blowfish_in_practice
                </p>
                <p>https://www.schneier.com/academic/blowfish/</p>
            </remarks>
            <seealso cref="T:SafeOrbit.Cryptography.Encryption.IFastEncryptor" />
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor" /> class.
            </summary>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor.#ctor(SafeOrbit.Cryptography.Random.ICryptoRandom)">
            <summary>
                Initializes a new instance of the <see cref="T:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor" /> class with a defined
                <see cref="T:SafeOrbit.Cryptography.Random.ICryptoRandom" />.
            </summary>
            <param name="random">The random generator to be used for creation of IV's.</param>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor.#ctor(SafeOrbit.Cryptography.Encryption.BlowfishCipherMode,SafeOrbit.Cryptography.Random.ICryptoRandom)">
            <summary>
                Initializes a new instance of the <see cref="T:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor" /> class with a defined
                <see cref="T:SafeOrbit.Cryptography.Encryption.BlowfishCipherMode" /> and <see cref="T:SafeOrbit.Cryptography.Random.ICryptoRandom" />.
            </summary>
            <param name="cipherMode">The cipher mode.</param>
            <param name="random">The random generator to be used for creation of IV's.</param>
            <exception cref="T:SafeOrbit.Exceptions.UnexpectedEnumValueException`1">
                <paramref name="cipherMode" /> is not defined in <see cref="T:SafeOrbit.Cryptography.Encryption.BlowfishCipherMode" />.
            </exception>
            <seealso cref="T:SafeOrbit.Cryptography.Encryption.BlowfishCipherMode" />
            <seealso cref="P:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor.IvSize" />
            <seealso cref="T:SafeOrbit.Cryptography.Random.ICryptoRandom" />
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor.#ctor(SafeOrbit.Cryptography.Encryption.BlowfishCipherMode)">
            <summary>
                Initializes a new instance of the <see cref="T:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor" /> class with a defined
                <see cref="T:SafeOrbit.Cryptography.Encryption.BlowfishCipherMode" />.
            </summary>
            <param name="chiperMode">The chiper mode.</param>
            <exception cref="T:SafeOrbit.Exceptions.UnexpectedEnumValueException`1">
                <paramref name="chiperMode" /> is not defined in
                <see cref="T:SafeOrbit.Cryptography.Encryption.BlowfishCipherMode" />.
            </exception>
            <seealso cref="T:SafeOrbit.Cryptography.Encryption.BlowfishCipherMode" />
            <seealso cref="P:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor.IvSize" />
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor.Encrypt(System.Byte[],System.Byte[])">
            <inheritdoc />
            <summary>
                Encrypts the specified input using <see cref="P:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor.CipherMode" />.
            </summary>
            <exception cref="T:System.ArgumentNullException">
                <p><paramref name="input" /> is <see langword="null" /> or empty.</p>
                <p><paramref name="key" /> is <see langword="null" /> or empty.</p>
            </exception>
            <exception cref="T:SafeOrbit.Exceptions.KeySizeException">
                Length of the <paramref name="key" /> must be between <see cref="P:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor.MinKeySize" /> and
                <see cref="P:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor.MaxKeySize" /> values.
            </exception>
            <exception cref="T:SafeOrbit.Exceptions.UnexpectedEnumValueException`1"><see cref="P:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor.CipherMode" /> is not defined or supported.</exception>
            <seealso cref="M:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor.EncryptAsync(System.Byte[],System.Byte[])" />
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor.Decrypt(System.Byte[],System.Byte[])">
            <inheritdoc />
            <summary>
                Decrypts the specified input using <see cref="P:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor.CipherMode" />.
            </summary>
            <exception cref="T:System.ArgumentNullException">
                <p><paramref name="input" /> is <see langword="null" /> or empty.</p>
                <p><paramref name="key" /> is <see langword="null" /> or empty.</p>
            </exception>
            <exception cref="T:SafeOrbit.Exceptions.KeySizeException">
                Length of the <paramref name="key" /> must be between <see cref="P:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor.MinKeySize" /> and
                <see cref="P:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor.MaxKeySize" /> values.
            </exception>
            <exception cref="T:SafeOrbit.Exceptions.UnexpectedEnumValueException`1"><see cref="P:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor.CipherMode" /> is not defined or supported.</exception>
            <seealso cref="M:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor.DecryptAsync(System.Byte[],System.Byte[])" />
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor.EncryptAsync(System.Byte[],System.Byte[])">
            <inheritdoc />
            <summary>
                Encrypts the specified input using <see cref="P:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor.CipherMode" />.
            </summary>
            <exception cref="T:System.ArgumentNullException">
                <p><paramref name="input" /> is <see langword="null" /> or empty.</p>
                <p><paramref name="key" /> is <see langword="null" /> or empty.</p>
            </exception>
            <exception cref="T:SafeOrbit.Exceptions.KeySizeException">
                Length of the <paramref name="key" /> must be between <see cref="P:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor.MinKeySize" /> and
                <see cref="P:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor.MaxKeySize" /> values.
            </exception>
            <exception cref="T:SafeOrbit.Exceptions.UnexpectedEnumValueException`1"><see cref="P:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor.CipherMode" /> is not defined or supported.</exception>
            <seealso cref="M:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor.Encrypt(System.Byte[],System.Byte[])" />
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor.DecryptAsync(System.Byte[],System.Byte[])">
            <inheritdoc />
            <summary>
                Decrypts the specified input using <see cref="P:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor.CipherMode" />.
            </summary>
            <exception cref="T:System.ArgumentNullException">
                <p><paramref name="input" /> is <see langword="null" /> or empty.</p>
                <p><paramref name="key" /> is <see langword="null" /> or empty.</p>
            </exception>
            <exception cref="T:SafeOrbit.Exceptions.KeySizeException">
                Length of the <paramref name="key" /> must be between <see cref="P:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor.MinKeySize" /> and
                <see cref="P:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor.MaxKeySize" /> values.
            </exception>
            <exception cref="T:SafeOrbit.Exceptions.UnexpectedEnumValueException`1"><see cref="P:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor.CipherMode" /> is not defined or supported.</exception>
            <seealso cref="M:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor.Decrypt(System.Byte[],System.Byte[])" />
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor.EnsureParameters(System.Byte[],System.Byte[])">
            <exception cref="T:System.ArgumentNullException">
                <p><paramref name="input" /> is <see langword="null" /> or empty.</p>
                <p><paramref name="key" /> is <see langword="null" /> or empty.</p>
            </exception>
            <exception cref="T:SafeOrbit.Exceptions.KeySizeException">
                Length of the <paramref name="key" /> must be between <see cref="P:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor.MinKeySize" /> and
                <see cref="P:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor.MaxKeySize" /> values.
            </exception>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishInternal.#ctor(System.String)">
            <summary>
            Constructor for hex key
            </summary>
            <param name="hexKey">Cipher key as a hex string</param>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishInternal.#ctor(System.Byte[])">
            <summary>
            Constructor for byte key
            </summary>
            <param name="cipherKey">Cipher key as a byte array</param>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishInternal.Encrypt_CBC(System.String)">
            <summary>
            Encrypts a string in CBC mode
            </summary>
            <param name="pt">Plaintext data to encrypt</param>
            <returns>Ciphertext with IV appended to front</returns>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishInternal.Decrypt_CBC(System.String)">
            <summary>
            Decrypts a string in CBC mode
            </summary>
            <param name="ct">Ciphertext with IV appended to front</param>
            <returns>Plaintext</returns>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishInternal.Decrypt_CBC(System.Byte[])">
            <summary>
            Decrypts a byte array in CBC mode.
            IV must be created and saved manually.
            </summary>
            <param name="ct">Ciphertext data to decrypt</param>
            <returns>Plaintext</returns>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishInternal.Encrypt_CBC(System.Byte[])">
            <summary>
            Encrypts a byte array in CBC mode.
            IV must be created and saved manually.
            </summary>
            <param name="pt">Plaintext data to encrypt</param>
            <returns>Ciphertext</returns>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishInternal.Encrypt_ECB(System.String)">
            <summary>
            Encrypt a string in ECB mode
            </summary>
            <param name="pt">Plaintext to encrypt as ascii string</param>
            <returns>hex value of encrypted data</returns>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishInternal.Decrypt_ECB(System.String)">
            <summary>
            Decrypts a string (ECB)
            </summary>
            <param name="ct">hHex string of the ciphertext</param>
            <returns>Plaintext ascii string</returns>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishInternal.Encrypt_ECB(System.Byte[])">
            <summary>
            Encrypts a byte array in ECB mode
            </summary>
            <param name="pt">Plaintext data</param>
            <returns>Ciphertext bytes</returns>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishInternal.Decrypt_ECB(System.Byte[])">
            <summary>
            Decrypts a byte array (ECB)
            </summary>
            <param name="ct">Ciphertext byte array</param>
            <returns>Plaintext</returns>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishInternal.Encrypt_CTR(System.String)">
            <summary>
            Encrypts a string (CTR)
            </summary>
            <param name="pt">The plaintext to encrypt</param>
            <returns>The ciphertext</returns>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishInternal.Decrypt_CTR(System.String)">
            <summary>
            Decrypt a string (CTR)
            </summary>
            <param name="ct">The ciphertext to decrypt</param>
            <returns>The plaintext</returns>
        </member>
        <member name="P:SafeOrbit.Cryptography.Encryption.BlowfishInternal.IV">
            <summary>
            Initialization vector for CBC mode.
            </summary>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishInternal.SetRandomIV">
            <summary>
            Creates and sets a random initialization vector.
            </summary>
            <returns>The random IV</returns>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishInternal.SetupKey(System.Byte[])">
            <summary>
            Sets up the S-blocks and the key
            </summary>
            <param name="cipherKey">Block cipher key (1-448 bits)</param>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishInternal.Crypt_ECB(System.Byte[],System.Boolean)">
            <summary>
            Encrypts or decrypts data in ECB mode
            </summary>
            <param name="text">plain/ciphertext</param>
            <param name="decrypt">true to decrypt, false to encrypt</param>
            <returns>(En/De)crypted data</returns>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishInternal.Crypt_CBC(System.Byte[],System.Boolean)">
            <summary>
            Encrypts or decrypts data in CBC mode
            </summary>
            <param name="input">plain/ciphertext</param>
            <param name="decrypt">true to decrypt, false to encrypt</param>
            <returns>(En/De)crypted data</returns>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishInternal.XorBlock(System.Byte[]@,System.Byte[])">
            <summary>
            XoR encrypts two 8 bit blocks
            </summary>
            <param name="block">8 bit block 1</param>
            <param name="iv">8 bit block 2</param>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishInternal.BlockEncrypt(System.Byte[]@)">
            <summary>
            Encrypts a 64 bit block
            </summary>
            <param name="block">The 64 bit block to encrypt</param>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishInternal.BlockDecrypt(System.Byte[]@)">
            <summary>
            Decrypts a 64 bit block
            </summary>
            <param name="block">The 64 bit block to decrypt</param>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishInternal.SetBlock(System.Byte[])">
            <summary>
            Splits the block into the two uint values
            </summary>
            <param name="block">the 64 bit block to setup</param>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishInternal.GetBlock(System.Byte[]@)">
            <summary>
            Converts the two uint values into a 64 bit block
            </summary>
            <param name="block">64 bit buffer to receive the block</param>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishInternal.encipher">
            <summary>
            Runs the blowfish algorithm (standard 16 rounds)
            </summary>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishInternal.decipher">
            <summary>
            Runs the blowfish algorithm in reverse (standard 16 rounds)
            </summary>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.BlowfishInternal.round(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            one round of the blowfish algorithm
            </summary>
            <param name="a">See spec</param>
            <param name="b">See spec</param>
            <param name="n">See spec</param>
            <returns></returns>
        </member>
        <member name="T:SafeOrbit.Cryptography.Encryption.EncryptorBase">
            <summary>
                Base class for the encryptors.
            </summary>
            <seealso cref="T:SafeOrbit.Cryptography.Encryption.IEncryptor" />
            <seealso cref="T:SafeOrbit.Cryptography.Encryption.AesEncryptor"/>
            <seealso cref="T:SafeOrbit.Cryptography.Encryption.BlowfishEncryptor"/>
        </member>
        <member name="P:SafeOrbit.Cryptography.Encryption.EncryptorBase.MinKeySize">
            <summary>
                Minimum size of key in bits for algorithm to function.
            </summary>
            <value>The minimum size of the key.</value>
        </member>
        <member name="P:SafeOrbit.Cryptography.Encryption.EncryptorBase.BlockSize">
            <summary>
            Gets the size of the block in bits.
            </summary>
            <value>The size of the block in bits.</value>
            <remarks>https://en.wikipedia.org/wiki/Block_size_(cryptography)</remarks>
        </member>
        <member name="P:SafeOrbit.Cryptography.Encryption.EncryptorBase.MaxKeySize">
            <summary>
                Maximum size of key in bits for algorithm to function.
            </summary>
            <value>The maximum size of the key.</value>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.EncryptorBase.ValidateKey(System.Byte[])">
            <summary>
                Ensures that the <paramref name="key" /> is not null and its size is between <see cref="P:SafeOrbit.Cryptography.Encryption.EncryptorBase.MinKeySize" /> and
                <see cref="P:SafeOrbit.Cryptography.Encryption.EncryptorBase.MaxKeySize" />
            </summary>
            <param name="key">The key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is <see langword="null" />.</exception>
            <exception cref="T:SafeOrbit.Exceptions.KeySizeException">
                Length of the <paramref name="key" /> must be between <see cref="P:SafeOrbit.Cryptography.Encryption.EncryptorBase.MinKeySize" /> and
                <see cref="P:SafeOrbit.Cryptography.Encryption.EncryptorBase.MaxKeySize" />values.
            </exception>
            <seealso cref="P:SafeOrbit.Cryptography.Encryption.EncryptorBase.MinKeySize" />
            <seealso cref="P:SafeOrbit.Cryptography.Encryption.EncryptorBase.MaxKeySize" />
        </member>
        <member name="T:SafeOrbit.Cryptography.Encryption.ICipherMode">
            <summary>
            Interface to be implemented by all of the cipher modes.
            </summary>
        </member>
        <member name="T:SafeOrbit.Cryptography.Encryption.IEncryptor">
            <summary>
                Common interface for all encryption algorithms.
            </summary>
        </member>
        <member name="P:SafeOrbit.Cryptography.Encryption.IEncryptor.MinKeySize">
            <summary>
                Minimum size of key in bits for algorithm to function.
            </summary>
            <value>The minimum size of the key.</value>
        </member>
        <member name="P:SafeOrbit.Cryptography.Encryption.IEncryptor.MaxKeySize">
            <summary>
                Maximum size of key in bits for algorithm to function.
            </summary>
            <value>The maximum size of the key.</value>
        </member>
        <member name="P:SafeOrbit.Cryptography.Encryption.IEncryptor.IvSize">
            <summary>
                Gets the size of the iv bytes for crypto.
            </summary>
            <value>The size of the iv bytes that's created for crypto.</value>
        </member>
        <member name="P:SafeOrbit.Cryptography.Encryption.IEncryptor.BlockSize">
            <summary>
                Gets the size of the block in bits.
            </summary>
            <remarks>https://en.wikipedia.org/wiki/Block_size_(cryptography)</remarks>
            <value>The size of the block in bits.</value>
        </member>
        <member name="T:SafeOrbit.Cryptography.Encryption.IFastEncryptor">
            <summary>
                <p>
                    Defines the default <see cref="T:SafeOrbit.Cryptography.Encryption.IFastEncryptor`3" /> using <see cref="T:System.Byte" /> arrays as
                    the types.
                </p>
            </summary>
            <seealso cref="T:SafeOrbit.Cryptography.Encryption.ISafeEncryptor" />
            <seealso cref="T:SafeOrbit.Cryptography.Encryption.IFastEncryptor`3" />
        </member>
        <member name="T:SafeOrbit.Cryptography.Encryption.IFastEncryptor`3">
            <summary>
                <p>Defines a fast and cryptographically strong encryptor.</p>
                <p>Use this class when you prefer the performance over security gained by slower actions.</p>
                <p>
                    It's faster than <see cref="T:SafeOrbit.Cryptography.Encryption.ISafeEncryptor`4" /> but also cryptographically strong.
                    It's not stronger than <see cref="T:SafeOrbit.Cryptography.Encryption.ISafeEncryptor`4" /> as it takes less time to
                    decrypt the data and does not use salt.
                </p>
                <p>
                    For slower and cryptographically stronger operations prefer
                    <see cref="T:SafeOrbit.Cryptography.Encryption.ISafeEncryptor`4" />
                </p>
            </summary>
            <typeparam name="TResult">The type of the result of the algorithm.</typeparam>
            <typeparam name="TInput">The type of user input data.</typeparam>
            <typeparam name="TKey">The type of key.</typeparam>
            <seealso cref="T:SafeOrbit.Cryptography.Encryption.ISafeEncryptor`4" />
            <seealso cref="T:SafeOrbit.Cryptography.Encryption.IFastEncryptor" />
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.IFastEncryptor`3.Encrypt(`1,`2)">
            <summary>
                Encrypts the specified input with the given key and the salt.
            </summary>
            <param name="input">The input.</param>
            <param name="key">The key.</param>
            <returns>Encrypted <typeparamref name="TResult" /></returns>
            <seealso cref="M:SafeOrbit.Cryptography.Encryption.IFastEncryptor`3.EncryptAsync(`1,`2)" />
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.IFastEncryptor`3.Decrypt(`1,`2)">
            <summary>
                Decrypts the specified input with the given key and the salt.
            </summary>
            <param name="input">The input.</param>
            <param name="key">The key.</param>
            <returns>Encrypted <typeparamref name="TResult" /></returns>
            <seealso cref="M:SafeOrbit.Cryptography.Encryption.IFastEncryptor`3.DecryptAsync(`1,`2)" />
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.IFastEncryptor`3.EncryptAsync(`1,`2)">
            <summary>
                Encrypts the specified input with the given key and the salt asynchronously.
            </summary>
            <param name="input">The input.</param>
            <param name="key">The key.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> for encrypted <typeparamref name="TResult" /></returns>
            <seealso cref="M:SafeOrbit.Cryptography.Encryption.IFastEncryptor`3.Encrypt(`1,`2)" />
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.IFastEncryptor`3.DecryptAsync(`1,`2)">
            <summary>
                Decrypts the specified input with the given key and the salt asynchronously.
            </summary>
            <param name="input">The input.</param>
            <param name="key">The key.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> for encrypted <typeparamref name="TResult" /></returns>
            <seealso cref="M:SafeOrbit.Cryptography.Encryption.IFastEncryptor`3.Decrypt(`1,`2)" />
        </member>
        <member name="T:SafeOrbit.Cryptography.Encryption.ISafeEncryptor">
            <summary>
                <p>
                    Defines the default <see cref="T:SafeOrbit.Cryptography.Encryption.ISafeEncryptor`4" /> using <see cref="T:System.Byte" /> arrays as
                    the types.
                </p>
            </summary>
            <seealso cref="T:SafeOrbit.Cryptography.Encryption.ISafeEncryptor" />
            <seealso cref="T:SafeOrbit.Cryptography.Encryption.IFastEncryptor`3" />
        </member>
        <member name="T:SafeOrbit.Cryptography.Encryption.ISafeEncryptor`4">
            <summary>
                <p>Defines a slow and cryptographically stronger encryptor.</p>
                <p>Use this class when you prefer the security over performance. </p>
                <p>
                    It's stronger than <see cref="T:SafeOrbit.Cryptography.Encryption.IFastEncryptor`3" /> because it takes more to decrypt and
                    it uses an additional <typeparamref name="TSalt" />.
                </p>
                <p>
                    For faster and cryptographically strong operations prefer
                    <see cref="T:SafeOrbit.Cryptography.Encryption.IFastEncryptor`3" />
                </p>
            </summary>
            <typeparam name="TResult">The type of the result of the algorithm.</typeparam>
            <typeparam name="TInput">The type of user input data.</typeparam>
            <typeparam name="TKey">The type of key.</typeparam>
            <typeparam name="TSalt">The type of the salt.</typeparam>
            <seealso cref="T:SafeOrbit.Cryptography.Encryption.IFastEncryptor`3" />
            <seealso cref="T:SafeOrbit.Cryptography.Encryption.ISafeEncryptor" />
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.ISafeEncryptor`4.Encrypt(`1,`2,`3)">
            <summary>
                Encrypts the specified input with the given key and the salt.
            </summary>
            <param name="input">The input.</param>
            <param name="key">The key.</param>
            <param name="salt">The salt.</param>
            <returns>Encrypted <typeparamref name="TResult" /></returns>
            <seealso cref="M:SafeOrbit.Cryptography.Encryption.ISafeEncryptor`4.EncryptAsync(`1,`2,`3)"/>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.ISafeEncryptor`4.Decrypt(`1,`2,`3)">
            <summary>
                Decrypts the specified input with the given key and the salt.
            </summary>
            <param name="input">The input.</param>
            <param name="key">The key.</param>
            <param name="salt">The salt.</param>
            <returns>Encrypted <typeparamref name="TResult" /></returns>
            <seealso cref="M:SafeOrbit.Cryptography.Encryption.ISafeEncryptor`4.DecryptAsync(`1,`2,`3)"/>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.ISafeEncryptor`4.EncryptAsync(`1,`2,`3)">
            <summary>
                Encrypts the specified input with the given key and the salt asynchronously.
            </summary>
            <param name="input">The input.</param>
            <param name="key">The key.</param>
            <param name="salt">The salt.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> for encrypted <typeparamref name="TResult" /></returns>
            <seealso cref="M:SafeOrbit.Cryptography.Encryption.ISafeEncryptor`4.Encrypt(`1,`2,`3)"/>
        </member>
        <member name="M:SafeOrbit.Cryptography.Encryption.ISafeEncryptor`4.DecryptAsync(`1,`2,`3)">
            <summary>
                Decrypts the specified input with the given key and the salt asynchronously.
            </summary>
            <param name="input">The input.</param>
            <param name="key">The key.</param>
            <param name="salt">The salt.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> for encrypted <typeparamref name="TResult" /></returns>
            <seealso cref="M:SafeOrbit.Cryptography.Encryption.ISafeEncryptor`4.Decrypt(`1,`2,`3)"/>
        </member>
        <member name="T:SafeOrbit.Cryptography.Hashers.IFastHasher`2">
            <summary>
                Abstracts a fast and cryptographic hash function
            </summary>
        </member>
        <member name="T:SafeOrbit.Cryptography.Hashers.IFastHasher">
            <summary>
                Abstracts a fast cryptographic hash function that returns <see cref="T:System.Int32" /> and can be seeded by
                <see cref="T:System.UInt32" />.
            </summary>
        </member>
        <member name="T:SafeOrbit.Cryptography.Hashers.ISafeHasher`1">
            <summary>
                Abstracts interface for a slow cryptographic hash function.
            </summary>
        </member>
        <member name="T:SafeOrbit.Cryptography.Hashers.ISafeHasher">
            <summary>
                Abstracts interface for a slow cryptographic hash function returning an array of bytes.
            </summary>
        </member>
        <member name="T:SafeOrbit.Cryptography.Hashers.Murmur32">
            <summary>
            MurMurHash3 is not a cryptological hasher. It should be used when a very fast hashing is needed.
            </summary>
        </member>
        <member name="M:SafeOrbit.Cryptography.Hashers.Murmur32.ComputeFast(System.Byte[])">
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:SafeOrbit.Cryptography.Hashers.Murmur32.ComputeFast(System.Byte[],System.UInt32)">
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> is <see langword="null" />.</exception>
        </member>
        <member name="T:SafeOrbit.Cryptography.Random.FastRandom">
            <summary>
                <p>
                    <see cref="T:SafeOrbit.Cryptography.Random.FastRandom" /> returns cryptographically strong random data. It's about 1000x times faster than
                    <see cref="T:SafeOrbit.Cryptography.Random.SafeRandom" />
                </p>
                <p>
                    For general purposes, <see cref="T:SafeOrbit.Cryptography.Random.FastRandom" /> is recommended because of its performance
                    characteristics, but for extremely strong keys and other things that don't require a large number of bytes
                    quickly,  <see cref="T:SafeOrbit.Cryptography.Random.SafeRandom" /> is recommended instead.
                </p>
            </summary>
            <remarks>
                <p>Wrapper for <see cref="T:SafeOrbit.Cryptography.Random.RandomGenerators.FastRandomGenerator" /></p>
            </remarks>
            <seealso cref="T:SafeOrbit.Cryptography.Random.SafeRandom" />
            <seealso cref="T:System.Security.Cryptography.RandomNumberGenerator" />
            <seealso cref="T:SafeOrbit.Cryptography.Random.RandomGenerators.FastRandomGenerator" />
        </member>
        <member name="F:SafeOrbit.Cryptography.Random.FastRandom.StaticInstance">
            <summary>
                Gets the static instance of <see cref="T:SafeOrbit.Cryptography.Random.FastRandom"/>.
            </summary>
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.FastRandom.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SafeOrbit.Cryptography.Random.FastRandom" /> class.
            </summary>
        </member>
        <member name="T:SafeOrbit.Cryptography.Random.ICryptoRandom">
            <summary>
                Abstracts a cryptographically secure random generator.
            </summary>
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.ICryptoRandom.GetBytes(System.Int32)">
            <summary>
                Gets an array of bytes with a cryptographically strong sequence of random values for the specified length.
            </summary>
            <param name="length">The length of the byte array.</param>
            <returns>Cryptographically strong sequence of random values.</returns>
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.ICryptoRandom.GetInt">
            <summary>
                Gets a cryptographically random int.
            </summary>
            <returns>Cryptographically random int</returns>
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.ICryptoRandom.GetInt(System.Int32,System.Int32)">
            <summary>
                Gets a cryptographically random int between <paramref name="min" /> a nd <paramref name="max" />.
            </summary>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <returns>Cryptographically random int</returns>
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.ICryptoRandom.GetBool">
            <summary>
                Gets a value of cryptographically strong true/false condition.
            </summary>
            <returns>Cryptographically random <c>true</c> or <c>false</c> value.</returns>
        </member>
        <member name="T:SafeOrbit.Cryptography.Random.IFastRandom">
            <summary>
                Abstracts fast and cryptographically secure random generator.
            </summary>
            <seealso cref="T:SafeOrbit.Cryptography.Random.ICryptoRandom" />
            <seealso cref="T:SafeOrbit.Cryptography.Random.FastRandom"/>
        </member>
        <member name="T:SafeOrbit.Cryptography.Random.ISafeRandom">
            <summary>
                Abstracts cryptographically secure random generator.
            </summary>
            <seealso cref="T:SafeOrbit.Cryptography.Random.ICryptoRandom" />
        </member>
        <member name="T:SafeOrbit.Cryptography.Random.RandomBase">
            <summary>
            Helper methods for the implementations.
            </summary>
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomBase.EnsureParameters(System.Int32,System.Int32)">
            <exception cref="T:System.ArgumentOutOfRangeException"><param name="upperBound"/> must be greater than <param name="lowerBound"/></exception>
        </member>
        <member name="T:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.GeneralDigest">
            base implementation of MD4 family style digest as outlined in
            "Handbook of Applied Cryptography", pages 344 - 347.
        </member>
        <member name="T:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.LongDigest">
            Base class for SHA-384 and SHA-512.
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.LongDigest.#ctor">
            Constructor for variable length word
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.LongDigest.#ctor(SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.LongDigest)">
            Copy constructor.  We are using copy constructors in place
            of the object.Clone() interface as this interface is not
            supported by J2ME.
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.LongDigest.AdjustByteCounts">
            adjust the byte counts so that byteCount2 represents the
            upper long (less 3 bits) word of the byte count.
        </member>
        <member name="T:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.MD5Digest">
            implementation of MD5 as outlined in "Handbook of Applied Cryptography", pages 346 - 347.
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.MD5Digest.#ctor(SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.MD5Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.MD5Digest.Reset">
            reset the chaining variables to the IV values.
        </member>
        <member name="T:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.RipeMD128Digest">
            implementation of RipeMD128
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.RipeMD128Digest.#ctor">
            Standard constructor
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.RipeMD128Digest.#ctor(SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.RipeMD128Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.RipeMD128Digest.Reset">
            reset the chaining variables to the IV values.
        </member>
        <member name="T:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.RipeMD160Digest">
            implementation of RipeMD see,
            http://www.esat.kuleuven.ac.be/~bosselae/ripemd160.html
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.RipeMD160Digest.#ctor">
            Standard constructor
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.RipeMD160Digest.#ctor(SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.RipeMD160Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.RipeMD160Digest.Reset">
            reset the chaining variables to the IV values.
        </member>
        <member name="T:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.RipeMD256Digest">
            <remarks>
            <p>Implementation of RipeMD256.</p>
            <p><b>Note:</b> this algorithm offers the same level of security as RipeMD128.</p>
            </remarks>
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.RipeMD256Digest.#ctor">
            <summary> Standard constructor</summary>
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.RipeMD256Digest.#ctor(SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.RipeMD256Digest)">
            <summary> Copy constructor.  This will copy the state of the provided
            message digest.
            </summary>
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.RipeMD256Digest.Reset">
            <summary> reset the chaining variables to the IV values.</summary>
        </member>
        <member name="T:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.RipeMD320Digest">
            <remarks>
            <p>Implementation of RipeMD 320.</p>
            <p><b>Note:</b> this algorithm offers the same level of security as RipeMD160.</p>
            </remarks>
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.RipeMD320Digest.#ctor">
            <summary> Standard constructor</summary>
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.RipeMD320Digest.#ctor(SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.RipeMD320Digest)">
            <summary> Copy constructor.  This will copy the state of the provided
            message digest.
            </summary>
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.RipeMD320Digest.Reset">
            <summary> reset the chaining variables to the IV values.</summary>
        </member>
        <member name="T:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.Sha1Digest">
             implementation of SHA-1 as outlined in "Handbook of Applied Cryptography", pages 346 - 349.
            
             It is interesting to ponder why the, apart from the extra IV, the other difference here from MD5
             is the "endienness" of the word processing!
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.Sha1Digest.#ctor(SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.Sha1Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.Sha1Digest.Reset">
            reset the chaining variables
        </member>
        <member name="T:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.Sha256Digest">
             Draft FIPS 180-2 implementation of SHA-256. <b>Note:</b> As this is
             based on a draft this implementation is subject to change.
            
             <pre>
                     block  word  digest
             SHA-1   512    32    160
             SHA-256 512    32    256
             SHA-384 1024   64    384
             SHA-512 1024   64    512
             </pre>
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.Sha256Digest.#ctor(SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.Sha256Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.Sha256Digest.Reset">
            reset the chaining variables
        </member>
        <member name="T:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.Sha512Digest">
             Draft FIPS 180-2 implementation of SHA-512. <b>Note:</b> As this is
             based on a draft this implementation is subject to change.
            
             <pre>
                     block  word  digest
             SHA-1   512    32    160
             SHA-256 512    32    256
             SHA-384 1024   64    384
             SHA-512 1024   64    512
             </pre>
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.Sha512Digest.#ctor(SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.Sha512Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.Sha512Digest.Reset">
            reset the chaining variables
        </member>
        <member name="T:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.TigerDigest">
            implementation of Tiger based on:
            <a href="http://www.cs.technion.ac.il/~biham/Reports/Tiger">
             http://www.cs.technion.ac.il/~biham/Reports/Tiger</a>
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.TigerDigest.#ctor">
            Standard constructor
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.TigerDigest.#ctor(SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.TigerDigest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.TigerDigest.Reset">
            reset the chaining variables
        </member>
        <member name="T:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.WhirlpoolDigest">
             Implementation of WhirlpoolDigest, based on Java source published by Barreto
             and Rijmen.
            
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.WhirlpoolDigest.#ctor(SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.WhirlpoolDigest)">
            Copy constructor. This will copy the state of the provided message
            digest.
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Digests.WhirlpoolDigest.Reset">
            Reset the chaining variables
        </member>
        <member name="T:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.IDigest">
            interface that a message digest conforms to.
        </member>
        <member name="P:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.IDigest.AlgorithmName">
             return the algorithm name
            
             @return the algorithm name
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.IDigest.GetDigestSize">
             return the size, in bytes, of the digest produced by this message digest.
            
             @return the size, in bytes, of the digest produced by this message digest.
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.IDigest.GetByteLength">
             return the size, in bytes, of the internal buffer used by this digest.
            
             @return the size, in bytes, of the internal buffer used by this digest.
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.IDigest.Update(System.Byte)">
             update the message digest with a single byte.
            
             @param inByte the input byte to be entered.
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.IDigest.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
             update the message digest with a block of bytes.
            
             @param input the byte array containing the data.
             @param inOff the offset into the byte array where the data starts.
             @param len the length of the data.
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.IDigest.DoFinal(System.Byte[],System.Int32)">
             Close the digest, producing the final digest value. The doFinal
             call leaves the digest reset.
            
             @param output the array the digest is to be copied into.
             @param outOff the offset into the out array the digest is to start at.
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.IDigest.Reset">
            reset the digest back to it's initial state.
        </member>
        <member name="T:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Prng.DigestRandomGenerator">
            Random generation based on the digest with counter. Calling AddSeedMaterial will
            always increase the entropy of the hash.
            <p>
            Internal access to the digest is synchronized so a single one of these can be shared.
            </p>
        </member>
        <member name="T:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Prng.ThreadedSeedGenerator">
            A thread based seed generator - one source of randomness.
            <p>
            Based on an idea from Marcus Lippert.
            </p>
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.Crypto.Prng.ThreadedSeedGenerator.GenerateSeed(System.Int32,System.Boolean)">
            Generate seed bytes. Set fast to false for best quality.
            <p>
            If fast is set to true, the code should be round about 8 times faster when
            generating a long sequence of random bytes. 20 bytes of random values using
            the fast mode take less than half a second on a Nokia e70. If fast is set to false,
            it takes round about 2500 ms.
            </p>
            @param numBytes the number of bytes to generate
            @param fast true if fast mode should be used
        </member>
        <member name="T:SafeOrbit.Cryptography.Random.RandomGenerators.SystemRng">
            <summary>
                This is just a wrapper around random generator from <see cref="N:System.Security.Cryptography" /> and adds no value
                whatsoever.
            </summary>
            <seealso cref="T:System.Security.Cryptography.RandomNumberGenerator" />
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.SystemRng.#ctor(System.Security.Cryptography.RandomNumberGenerator)">
            <exception cref="T:System.ArgumentNullException"><paramref name="systemRngProvider" /> is <see langword="null" />.</exception>
        </member>
        <member name="T:SafeOrbit.Cryptography.Random.RandomGenerators.ThreadedSeedGeneratorRng">
            <inheritdoc />
            <summary>
                A simple wrapper around BouncyCastle ThreadedSeedGenerator. Starts a thread in a tight increment loop,
                while another thread samples the variable being incremented.  Entropy is generated by the OS thread
                scheduler, not knowing how many times the first thread will loop in the period of time the second thread loops
                once.
                It is recommended to use ThreadedSeedGeneratorRNG as one of the entropy sources, but not all by itself,
                because thread scheduling is deterministically controlled by your OS, and easily influenced by outsiders.
            </summary>
        </member>
        <member name="P:SafeOrbit.Cryptography.Random.RandomGenerators.ThreadedSeedGeneratorRng.MaxPoolSize">
            <summary>
                ThreadedSeedGeneratorRNG will always try to fill up to MaxPoolSize bytes available for read
            </summary>
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.ThreadedSeedGeneratorRng.Dispose(System.Boolean)">
            <summary>
                When overridden in a derived class, releases the unmanaged resources used by the
                <see cref="T:System.Security.Cryptography.RandomNumberGenerator" /> and optionally releases the managed resources.
            </summary>
            <param name="disposing">
                true to release both managed and unmanaged resources; false to release only unmanaged
                resources.
            </param>
        </member>
        <member name="T:SafeOrbit.Cryptography.Random.RandomGenerators.ThreadSchedulerRng">
            <inheritdoc />
            <summary>
                In a multitasking OS, each individual thread never knows when it's going to be granted execution time,
                as many processes and threads compete for CPU cycles.  The granularity of time to wake up from sleep is
                something like +/- a few ms, while the granularity of DateTime.Now is Ticks, 10million per second.  Although
                the OS scheduler is surely deterministic, there should be a fair amount of entropy in the least significant
                bits of DateTime.Now.Ticks upon thread waking.  But since the OS scheduler is surely deterministic, it is
                not recommended to use ThreadSchedulerRNG as your only entropy source.  It is recommended to use this
                class ONLY in addition to other entropy sources.
            </summary>
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.ThreadSchedulerRng.GetBytes(System.Byte[])">
            <summary>
                Gets the bytes.
            </summary>
            <param name="data">The data.</param>
            <exception cref="T:System.Security.Cryptography.CryptographicException">Failed to return requested number of bytes</exception>
        </member>
        <member name="T:SafeOrbit.Cryptography.Random.RandomGenerators.ThreadSchedulerRng.ThreadSchedulerRngCore">
            <summary>
                By putting the core into its own class, it makes it easy for us to create a single instance of it, referenced
                by a static member of ThreadSchedulerRNG, without any difficulty of finalizing or disposing etc.
            </summary>
        </member>
        <member name="T:SafeOrbit.Cryptography.Random.RandomGenerators.FastRandomGenerator">
            <inheritdoc />
            <summary>
                <p>
                    <see cref="T:SafeOrbit.Cryptography.Random.RandomGenerators.FastRandomGenerator" /> returns cryptographically strong random data.  It uses a crypto prng to
                    generate more bytes than actually available in hardware entropy, so it's about 1,000 times faster than
                    <see cref="T:SafeOrbit.Cryptography.Random.RandomGenerators.SafeRandomGenerator" />.
                </p>
                <p>
                    For general purposes, <see cref="T:SafeOrbit.Cryptography.Random.RandomGenerators.FastRandomGenerator" /> is recommended because of its performance
                    characteristics, but for extremely strong keys and other things that don't require a large number of bytes
                    quickly,  <see cref="T:SafeOrbit.Cryptography.Random.RandomGenerators.SafeRandomGenerator" /> is recommended instead.
                </p>
            </summary>
            <example>
            <code>
             using SafeOrbit.Cryptography.Random;
             static void Main(string[] args)
             {
                 StartEarly.StartFillingEntropyPools();  // Start gathering entropy as early as possible
                 var randomBytes = new byte[32];
                 // Performance is highly variable.  On my system, it generated 2.00MB(minimum)/3.04MB(avg)/3.91MB(max) per second
                 // default FastRandom() constructor uses the SafeRandom() default constructor, which uses:
                 //     SystemRNGCryptoServiceProvider/SHA256, 
                 //     ThreadedSeedGeneratorRNG/SHA256/RipeMD256Digest,
                 FastRandomGenerator.StaticInstance.GetBytes(randomBytes);
             }
             </code>
            </example>
        </member>
        <member name="F:SafeOrbit.Cryptography.Random.RandomGenerators.FastRandomGenerator.SeedSize">
            <summary>
                Number of SafeRandomGenerator bytes to use when reseeding PRNG.
            </summary>
        </member>
        <member name="T:SafeOrbit.Cryptography.Random.RandomGenerators.SafeRandomGenerator">
            <inheritdoc />
            <summary>
                <see cref="T:SafeOrbit.Cryptography.Random.RandomGenerators.SafeRandomGenerator" /> returns cryptographically strong random data, never to exceed the number of
                bytes available from the specified entropy sources.  This can cause slow generation, and is recommended only for
                generating extremely strong keys and other things that don't require a large number of bytes quickly.  This is CPU
                intensive. For general purposes, see <see cref="T:SafeOrbit.Cryptography.Random.RandomGenerators.FastRandomGenerator" /> instead.
            </summary>
            <example>
                <code>
                      using SafeOrbit.Cryptography.Random.RandomGenerators;
                      static void Main(string[] args)
                      {
                      StartEarly.StartFillingEntropyPools();  // Start gathering entropy as early as possible
                            ///      var randomBytes = new byte[32];
                            // Performance is highly variable.  On my system it generated 497Bytes(minimum)/567KB(avg)/1.7MB(max) per second
                            // default SafeRandomGenerator() constructor uses:
                            //     SystemRNGCryptoServiceProvider/SHA256, 
                            //     ThreadedSeedGeneratorRNG/SHA256/RipeMD256Digest
                 SafeRandomGenerator.StaticInstance.GetBytes(randomBytes);
             }
             </code>
            </example>
        </member>
        <member name="T:SafeOrbit.Cryptography.Random.RandomGenerators.HashAlgorithmWrapper">
            <summary>
                HashAlgorithmWrapper is an abstraction wrapper class, to contain either .NET
                System.Security.Cryptography.HashAlgorithm,
                or Bouncy Castle Org.BouncyCastle.Crypto.IDigest, and make the user agnostic.
            </summary>
        </member>
        <member name="T:SafeOrbit.Cryptography.Random.RandomGenerators.StartEarly">
            <summary>
                Starts all entropy sources filling their respective entropy pools, to reduce wait time when you actually call them.
                It is recommended to use StartEarly.StartFillingEntropyPools(); at the soonest entry point to your application, for
                example the
                first line of Main()
            </summary>
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.RandomGenerators.StartEarly.StartFillingEntropyPools">
            <summary>
                Starts all entropy sources filling their respective entropy pools, to reduce wait time when you actually call them.
                It is recommended to use StartEarly.StartFillingEntropyPools(); at the soonest entry point to your application, for
                example the
                first line of Main()
            </summary>
        </member>
        <member name="T:SafeOrbit.Cryptography.Random.SafeRandom">
            <summary>
                <p>
                    <see cref="T:SafeOrbit.Cryptography.Random.SafeRandom" /> returns cryptographically strong random data, never to exceed the number of
                    bytes available from the specified entropy sources.  This can cause slow generation, and is recommended only
                    for generating extremely strong keys and other things that don't require a large number of bytes quickly.  This is
                    CPU intensive. For general purposes, see <see cref="T:SafeOrbit.Cryptography.Random.FastRandom" /> instead.
                </p>
            </summary>
            <remarks>
                <p>Wrapper for <see cref="T:SafeOrbit.Cryptography.Random.RandomGenerators.SafeRandomGenerator" /></p>
            </remarks>
            <seealso cref="T:SafeOrbit.Cryptography.Random.FastRandom" />
            <seealso cref="T:System.Security.Cryptography.RandomNumberGenerator" />
            <seealso cref="T:SafeOrbit.Cryptography.Random.RandomGenerators.SafeRandomGenerator" />
        </member>
        <member name="F:SafeOrbit.Cryptography.Random.SafeRandom.StaticInstance">
            <summary>
                Gets the static instance of <see cref="T:SafeOrbit.Cryptography.Random.SafeRandom"/>.
            </summary>
        </member>
        <member name="M:SafeOrbit.Cryptography.Random.SafeRandom.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SafeOrbit.Cryptography.Random.FastRandom" /> class.
            </summary>
        </member>
        <member name="F:SafeOrbit.Library.InternalsVisibleTo.ToDynamicProxyGenAssembly2">
            <summary>
                Constant to use when making assembly internals visible to proxy types generated by DynamicProxy. Required when
                proxying internal types.
            </summary>
        </member>
        <member name="T:SafeOrbit.Library.Build.IBuildInfo">
            <summary>
            Information about how SafeOrbit was built.
            </summary>
        </member>
        <member name="T:SafeOrbit.Library.Build.Platform">
            <summary>
            An enumeration of the supported platforms for SafeOrbit.
            </summary>
        </member>
        <member name="T:SafeOrbit.Library.ISafeOrbitCore">
            <summary>
                Abstracts the class to access inner library behavior.
            </summary>
        </member>
        <member name="P:SafeOrbit.Library.ISafeOrbitCore.Factory">
            <summary>
                Safe object container that's being used by the library.
            </summary>
        </member>
        <member name="M:SafeOrbit.Library.ISafeOrbitCore.StartEarly">
            <summary>
                Loads the necessary data early on. For better performance, it's highly recommended to start the
                application early in your application start.
            </summary>
        </member>
        <member name="P:SafeOrbit.Library.ISafeOrbitCore.BuildInfo">
            <summary>
            Gets the information regarding to current build of SafeOrbit.
            </summary>
        </member>
        <member name="T:SafeOrbit.Library.SafeOrbitCore">
            <summary>
                The class where you control the current library behavior.
            </summary>
            <seealso cref="P:SafeOrbit.Library.SafeOrbitCore.Current" />
            <seealso cref="T:SafeOrbit.Library.ISafeOrbitCore" />
            <seealso cref="T:SafeOrbit.Memory.InjectionServices.IAlerts" />
        </member>
        <member name="M:SafeOrbit.Library.SafeOrbitCore.#ctor">
            <summary>
                Use static <see cref="P:SafeOrbit.Library.SafeOrbitCore.Current" /> property instead.
            </summary>
        </member>
        <member name="P:SafeOrbit.Library.SafeOrbitCore.Current">
            <summary>
                Returns the current <see cref="T:SafeOrbit.Library.SafeOrbitCore" /> class for running SafeOrbit.
            </summary>
        </member>
        <member name="M:SafeOrbit.Library.SafeOrbitCore.AlertInjection(System.Object,SafeOrbit.Memory.Injection.IInjectionMessage)">
            <summary>
                Internal method to alert an injection. It's virtual for testability.
            </summary>
            <param name="object">The injected object.</param>
            <param name="info">The information.</param>
        </member>
        <member name="T:SafeOrbit.Exceptions.DataLengthException">
            <summary>
                This exception is thrown if a buffer that is meant to have output copied into it turns out to be too short, or if
                insufficient input was given..
            </summary>
        </member>
        <member name="T:SafeOrbit.Exceptions.KeySizeException">
            <summary>
            This type of exception is thrown if the key size was given wrong to complete the cryptologic operation.
            </summary>
        </member>
        <member name="T:SafeOrbit.Exceptions.ReadOnlyAccessForbiddenException">
            <summary>
            This type of exception is thrown when trying to modify an object with only read only access.
            </summary>
            <remarks>
            TODO: rename this class.
            </remarks>
        </member>
        <member name="T:SafeOrbit.Exceptions.SafeOrbitException">
            <summary>
                An abstract class for all of special exceptions that SafeOrbit throws.
            </summary>
            <seealso cref="T:SafeOrbit.Exceptions.SerializableException.SerializableExceptionBase"/>
        </member>
        <member name="T:SafeOrbit.Exceptions.SerializableException.SerializableExceptionBase">
            <summary>
                An abstract base for serializable classes.
            </summary>
            <remarks>
                <p>Override <see cref="M:SafeOrbit.Exceptions.SerializableException.SerializableExceptionBase.ConfigureSerialize(SafeOrbit.Exceptions.SerializableException.ISerializationContext)" /> method to add different properties to the serialization.</p>
            </remarks>
            <seealso cref="T:System.Exception"/>
            <seealso cref="M:SafeOrbit.Exceptions.SerializableException.SerializableExceptionBase.ConfigureSerialize(SafeOrbit.Exceptions.SerializableException.ISerializationContext)"/>
        </member>
        <member name="T:SafeOrbit.Exceptions.SerializableException.ISerializationContext">
            <summary>
                Abstracts a class that represents the context of a serialization
            </summary>
            <seealso cref="T:SafeOrbit.Exceptions.SerializableException.SerializationContext"/>
            <seealso cref="T:SafeOrbit.Exceptions.SerializableException.SerializableExceptionBase"/>
        </member>
        <member name="T:SafeOrbit.Exceptions.SerializableException.ISerializationPropertyInfo">
            <summary>
            Abstracts serialization property.
            </summary>
        </member>
        <member name="T:SafeOrbit.Exceptions.UnexpectedEnumValueException`1">
            <summary>
            An exception to throw when an <see cref="T:System.Enum"/> is out of range.
            </summary>
            <typeparam name="TEnum">Type of the enum</typeparam>
            <seealso cref="T:SafeOrbit.Exceptions.SafeOrbitException" />
            <seealso cref="T:SafeOrbit.Exceptions.SerializableException.SerializableExceptionBase" />
        </member>
        <member name="T:SafeOrbit.Exceptions.MemoryInjectionException">
            <summary>
                An exception to throw when memory injection is detected.
            </summary>
            <seealso cref="T:SafeOrbit.Exceptions.SafeOrbitException" />
            <seealso cref="T:SafeOrbit.Exceptions.SerializableException.SerializableExceptionBase" />
        </member>
        <member name="M:SafeOrbit.Extensions.ByteArrayExtensions.Combine(System.Byte[],System.Byte[][])">
            <summary>
                Appends the byte array after the existing one
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="byteArray" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="byteArrays" /> is <see langword="null" />.</exception>
            <exception cref="T:System.OverflowException">The sum of byte array length larger than <see cref="F:System.Int32.MaxValue" />.</exception>
        </member>
        <member name="M:SafeOrbit.Extensions.ByteArrayExtensions.SafeEquals(System.Byte[],System.Byte[])">
            <summary>
                Compares two byte arrays without revealing them all in the memory to protect against timing-attacks.
            </summary>
            <remarks>
                <p>
                    Comparing the hashes in "length-constant" time ensures that an attacker cannot extract the hash of a password
                    in an
                    on-line system using a timing attack, then crack it off-line. The standard way to check if two sequences of
                    bytes(strings) are the same is to compare the first byte, then the second, then the third, and so on. As soon
                    as
                    you find a byte that isn't the same for both strings, you know they are different and can return a negative
                    response immediately. If you make it through both strings without finding any bytes that differ, you know
                    the strings are the same and can return a positive result. This means that comparing two strings can take a
                    different amount of time depending on how much of the strings match.
                </p>
                <p>
                    For example, a standard comparison of the strings "xyzabc" and "abcxyz" would immediately see that the first
                    character is different and wouldn't  bother to check the rest of the string. On the other hand, when the
                    strings "aaaaaaaaaaB" and "aaaaaaaaaaZ" are compared, the comparison algorithm scans through the block of "a"
                    before it determines the strings are unequal.
                </p>
            </remarks>
        </member>
        <member name="M:SafeOrbit.Extensions.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
                Performs the specified action on each element of the <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <typeparam name="T">Type of the <see cref="T:System.Collections.Generic.IEnumerable`1" /></typeparam>
            <param name="items">The items.</param>
            <param name="action">
                The <see cref="T:System.Action`1" /> delegate to perform on each element of the
                <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <p><paramref name="items" /> is <see langword="null" /></p>
            </exception>
        </member>
        <member name="M:SafeOrbit.Extensions.IEnumerableExtensions.EmptyIfNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> if the caller is <see langword="null" />
            </summary>
            <typeparam name="T">Type of the enumeration</typeparam>
            <param name="iEnumerable">The enumeration.</param>
            <returns>Null if <paramref name="iEnumerable" /> is null, otherwise; <paramref name="iEnumerable" /></returns>
        </member>
        <member name="M:SafeOrbit.Extensions.IEnumerableExtensions.AreAllEqual``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Compares and returns if all elements equal to each other.
            </summary>
        </member>
        <member name="T:SafeOrbit.Extensions.TaskExtensions">
            <summary>
            Stephen Cleary approved
            http://stackoverflow.com/questions/15428604/how-to-run-a-task-on-a-custom-taskscheduler-using-await
            </summary>
        </member>
        <member name="M:SafeOrbit.Helpers.Fast.For(System.Int32,System.Int32,System.Action{System.Int32})">
            <summary>
                Runs fast for-each using <see cref="T:System.Threading.Tasks.Parallel" /> and <see cref="T:System.Collections.Concurrent.Partitioner" />
            </summary>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">The end index.</param>
            <param name="delegate">The delegate.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="delegate" /> is <see langword="null" />.</exception>
        </member>
        <member name="T:SafeOrbit.Helpers.IntCondition">
            <summary>
                Helper class for <see cref="T:System.Threading.Interlocked" />.
                <see cref="T:System.Threading.Interlocked" /> can not handle bools. So ints are used as bools
            </summary>
        </member>
        <member name="M:SafeOrbit.Helpers.RuntimeHelper.PrepareConstrainedRegions">
            <summary>
            Create a CER (Constrained Execution Region)
            </summary>
        </member>
        <member name="T:SafeOrbit.IDeepCloneable`1">
            <summary>
                Defines the interface for any object that can be deep cloned.
            </summary>
            <typeparam name="TCloneable">The typed returned by the clone operation.</typeparam>
        </member>
        <member name="M:SafeOrbit.IDeepCloneable`1.DeepClone">
            <summary>
                Creates a deep clone of this object.
            </summary>
            <returns>A deep clone of this object.</returns>
        </member>
        <member name="T:SafeOrbit.IFactory`1">
            <summary>
                Generic factory for instances of type <typeparamref name="TComponent" />
            </summary>
            <typeparam name="TComponent">The type of the instance.</typeparam>
        </member>
        <member name="M:SafeOrbit.IFactory`1.Create">
            <summary>
                Creates an instance of type <typeparamref name="TComponent" />
            </summary>
            <returns>An instance of type <typeparamref name="TComponent" /></returns>
        </member>
        <member name="T:SafeOrbit.IShallowCloneable`1">
            <summary>
                Defines the interface for any object that can be shallow cloned.
            </summary>
            <typeparam name="TCloneable">The typed returned by the clone operation..</typeparam>
        </member>
        <member name="M:SafeOrbit.IShallowCloneable`1.ShallowClone">
            <summary>
                Creates a shallow clone of this object.
            </summary>
            <returns>A deep clone of this object.</returns>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Protectable.IProtectable`1">
            <summary>
                Defines a class that can work in different protection modes, and can dynamically switch between them.
            </summary>
            <typeparam name="TProtectionLevel">The type of the protection model.</typeparam>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Protectable.IProtectable`1.CurrentProtectionMode">
            <summary>
                Gets the current protection mode.
            </summary>
            <value>The current protection mode.</value>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Protectable.IProtectable`1.SetProtectionMode(`0)">
            <summary>
                Sets the protection mode.
            </summary>
            <param name="objectProtectionMode">The object protection mode.</param>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Protectable.IProtectionChangeContext`1">
            <summary>
                An interface representing the event arguments when the protection level switch is requested.
            </summary>
            <typeparam name="TProtectionLevel">The type of the protection level.</typeparam>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Protectable.IProtectionChangeContext`1.OldValue">
            <summary>
                Gets the old value of the <typeparamref name="TProtectionLevel" />.
            </summary>
            <value>The old value of the <typeparamref name="TProtectionLevel" />.</value>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Protectable.IProtectionChangeContext`1.NewValue">
            <summary>
                Gets the new value of the <typeparamref name="TProtectionLevel" />. This is the value that's requested to be set.
            </summary>
            <value>The new value of the <typeparamref name="TProtectionLevel" /> that's requested to be set.</value>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Protectable.IProtectionChangeContext`1.IsCanceled">
            <summary>
                Gets or sets a value indicating whether the protection level switching is canceled.
            </summary>
            <value><c>true</c> if this protection level switching is canceled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Protectable.ProtectionChangeContext`1">
            <summary>
                A basic class that implements <see cref="T:SafeOrbit.Infrastructure.Protectable.IProtectionChangeContext`1" />. This class cannot be
                inherited.
            </summary>
            <typeparam name="TProtectionLevel">The type of the protection level.</typeparam>
            <seealso cref="T:SafeOrbit.Infrastructure.Protectable.IProtectionChangeContext`1" />
        </member>
        <member name="M:SafeOrbit.Infrastructure.Protectable.ProtectionChangeContext`1.#ctor(`0,`0)">
            <summary>
                Initializes a new instance of the <see cref="T:SafeOrbit.Infrastructure.Protectable.ProtectionChangeContext`1" /> class using an old an
                new value.
            </summary>
            <param name="oldValue">The old value of the protection level.</param>
            <param name="newValue">The new value of the protection level.</param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Protectable.ProtectionChangeContext`1.#ctor(`0)">
            <summary>
                Initializes a new instance of the <see cref="T:SafeOrbit.Infrastructure.Protectable.ProtectionChangeContext`1" /> class using the new
                value.
            </summary>
            <param name="newValue">The new value of the protection level.</param>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Protectable.ProtectionChangeContext`1.OldValue">
            <summary>
                Gets the old value of the <typeparamref name="TProtectionLevel" />.
            </summary>
            <value>The old value of the <typeparamref name="TProtectionLevel" />.</value>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Protectable.ProtectionChangeContext`1.NewValue">
            <summary>
                Gets the new value of the <typeparamref name="TProtectionLevel" />. This is the value that's requested to be set.
            </summary>
            <value>The new value of the <typeparamref name="TProtectionLevel" /> that's requested to be set.</value>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Protectable.ProtectionChangeContext`1.IsCanceled">
            <summary>
                Gets or sets a value indicating whether the protection level switching is canceled.
            </summary>
            <value><c>true</c> if this protection level switching is canceled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Protectable.ProtectableBase`1">
            <summary>
                A base class that provides helper methods for the implementation of
                <see cref="T:SafeOrbit.Infrastructure.Protectable.IProtectable`1" />.
            </summary>
            <typeparam name="TProtectionLevel">The type of the t protection level.</typeparam>
            <seealso cref="T:SafeOrbit.Infrastructure.Protectable.IProtectable`1" />
        </member>
        <member name="F:SafeOrbit.Infrastructure.Protectable.ProtectableBase`1._isSettingMode">
            <summary>
                A flag that indicates mode is being set in any thread.
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Protectable.ProtectableBase`1.CurrentProtectionMode">
            <summary>
                Gets the current protection mode.
            </summary>
            <value>The current protection mode.</value>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Protectable.ProtectableBase`1.SetProtectionMode(`0)">
            <summary>
                Sets the <see cref="P:SafeOrbit.Infrastructure.Protectable.ProtectableBase`1.CurrentProtectionMode" /> if the value of <paramref name="protectionMode" /> is different than
                the <see cref="P:SafeOrbit.Infrastructure.Protectable.ProtectableBase`1.CurrentProtectionMode" />.
            </summary>
            <param name="protectionMode">The object protection mode.</param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Protectable.ProtectableBase`1.ChangeProtectionMode(SafeOrbit.Infrastructure.Protectable.IProtectionChangeContext{`0})">
            <summary>
                Must be overridden with a logic while switching happens.
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Protectable.ProtectableBase`1.InternalSetMode(`0)">
            <summary>
                Calls the <see cref="M:SafeOrbit.Infrastructure.Protectable.ProtectableBase`1.ChangeProtectionMode(SafeOrbit.Infrastructure.Protectable.IProtectionChangeContext{`0})" /> method with right context. If the operation is not canceled then
                sets <see cref="P:SafeOrbit.Infrastructure.Protectable.ProtectableBase`1.CurrentProtectionMode" />
            </summary>
            <param name="objectProtectionMode">The object protection mode.</param>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Reflection.ITypeIdGenerator">
            <summary>
                Abstract a service that can generate unique identifiers for a type.
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Reflection.ITypeIdGenerator.Generate``1">
            <summary>
                Generates a new id for the type.
            </summary>
            <typeparam name="T">The type that the id will be returned for.</typeparam>
            <returns>The id.</returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Reflection.ITypeIdGenerator.Generate(System.Type)">
            <summary>
                Generates a new id for the type.
            </summary>
            <param name="type">The type that the id will be returned for.</param>
            <returns>The id.</returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Reflection.MethodInfoHelper.GetIlBytes(System.Reflection.MethodInfo)">
            <summary>
                Gets the IL-code as bytes for the specified <see cref="T:System.Reflection.MethodInfo" />.
            </summary>
            <param name="methodInfo">The method information of the IL-code.</param>
            <returns>IL-code as bytes</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="methodInfo" /> is <see langword="null" /></exception>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Reflection.TypeIdGenerator">
            <inheritdoc />
            <summary>
                Generates a key/id for each type
            </summary>
            <seealso cref="T:SafeOrbit.Infrastructure.Reflection.ITypeIdGenerator" />
        </member>
        <member name="P:SafeOrbit.Infrastructure.Reflection.TypeIdGenerator.StaticInstance">
            <summary>
                Gets the static instance.
            </summary>
            <value>The static instance.</value>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Reflection.TypeIdGenerator.Generate``1">
            <inheritdoc />
            <summary>
            Generates a new id for the type.
            </summary>
            <typeparam name="T">The type that the id will be returned for.</typeparam>
            <returns>The id.</returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Reflection.TypeIdGenerator.Generate(System.Type)">
            <inheritdoc />
            <summary>
            Generates a new id for the type.
            </summary>
            <param name="type">The type that the id will be returned for.</param>
            <returns>The id.</returns>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.ISerializer">
            <summary>
                An abstraction for a generic <see cref="T:System.Object"/> serializer.
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.ISerializer.Serialize(System.Object)">
            <summary>
                Serializes the specified object to a byte array.
            </summary>
            <param name="object">The object to serialize.</param>
            <returns>Byte array for the serialization of the object.</returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.ISerializer.Deserialize``1(System.Byte[])">
            <summary>
                Deserializes the specified byte array to an object.
            </summary>
            <param name="byteArray">The byte array to deserialize.</param>
            <returns>Deserialized object from bytes.</returns>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BinaryPropertyDeserializer">
            <summary>
              Contains logic to deserialize data from a binary format. Format can vary according to the used IBinaryWriter. 
              For data serialized with BurstBinaryWriter you use BurstBinaryReader and for SizeOptimizedBinaryWriter you use SizeOptimizedBinaryReader
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BinaryPropertyDeserializer._propertyCache">
            <summary>
            Properties already processed. Used for reference resolution.
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BinaryPropertyDeserializer.Open(System.IO.Stream)">
            <summary>
              Open the stream to read
            </summary>
            <param name = "stream"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BinaryPropertyDeserializer.Deserialize">
            <summary>
              Reading the property
            </summary>
            <returns></returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BinaryPropertyDeserializer.Close">
            <summary>
              Cleans all
            </summary>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BinaryPropertySerializer">
            <summary>
                Contains logic to serialize data to a binary format. Format varies according to the used IBinaryWriter.
                Actually there are BurstBinaryWriter and SizeOptimizedBinaryWriter (see the constructor)
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BinaryPropertySerializer.#ctor(SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Binary.IBinaryWriter)">
            <summary>
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BinaryPropertySerializer.Open(System.IO.Stream)">
            <summary>
                Open the stream for writing
            </summary>
            <param name="stream" />
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BinaryPropertySerializer.Close">
            <summary>
                Closes the stream
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BinaryPropertySerializer.SerializeNullProperty(SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.PropertyTypeInfo{SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.NullProperty})">
            <summary>
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BinaryPropertySerializer.SerializeSimpleProperty(SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.PropertyTypeInfo{SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.SimpleProperty})">
            <summary>
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BinaryPropertySerializer.SerializeMultiDimensionalArrayProperty(SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.PropertyTypeInfo{SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.MultiDimensionalArrayProperty})">
            <summary>
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BinaryPropertySerializer.SerializeSingleDimensionalArrayProperty(SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.PropertyTypeInfo{SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.SingleDimensionalArrayProperty})">
            <summary>
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BinaryPropertySerializer.SerializeDictionaryProperty(SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.PropertyTypeInfo{SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.DictionaryProperty})">
            <summary>
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BinaryPropertySerializer.SerializeCollectionProperty(SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.PropertyTypeInfo{SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.CollectionProperty})">
            <summary>
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BinaryPropertySerializer.SerializeComplexProperty(SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.PropertyTypeInfo{SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ComplexProperty})">
            <summary>
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BinaryPropertySerializer.SerializeReference(SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ReferenceTargetProperty)">
            <summary>
            </summary>
            <param name="referenceTarget"></param>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Binary.IBinaryReader">
            <summary>
              Reads from a binary format
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Binary.IBinaryReader.ReadElementId">
            <summary>
              Reads single byte
            </summary>
            <returns></returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Binary.IBinaryReader.ReadType">
            <summary>
              Read type
            </summary>
            <returns>null if no type defined</returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Binary.IBinaryReader.ReadNumber">
            <summary>
              Read integer which was saved as 1,2 or 4 bytes, according to its size
            </summary>
            <returns></returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Binary.IBinaryReader.ReadNumbers">
            <summary>
              Read array of integers which were saved as 1,2 or 4 bytes, according to their size
            </summary>
            <returns>empty array if no numbers defined</returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Binary.IBinaryReader.ReadName">
            <summary>
              Reads property name
            </summary>
            <returns>null if no name defined</returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Binary.IBinaryReader.ReadValue(System.Type)">
            <summary>
              Reads simple value (value of a simple property)
            </summary>
            <param name = "expectedType"></param>
            <returns>null if no value defined</returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Binary.IBinaryReader.Open(System.IO.Stream)">
            <summary>
              Opens the stream for reading
            </summary>
            <param name = "stream"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Binary.IBinaryReader.Close">
            <summary>
              Does nothing, the stream can be further used and has to be manually closed
            </summary>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Binary.IBinaryWriter">
            <summary>
              Writes in a binary format
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Binary.IBinaryWriter.WriteElementId(System.Byte)">
            <summary>
              Writes Element Id
            </summary>
            <param name = "id"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Binary.IBinaryWriter.WriteType(System.Type)">
            <summary>
              Writes type
            </summary>
            <param name = "type"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Binary.IBinaryWriter.WriteName(System.String)">
            <summary>
              Writes property name
            </summary>
            <param name = "name"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Binary.IBinaryWriter.WriteValue(System.Object)">
            <summary>
              Writes a simple value (value of a simple property)
            </summary>
            <param name = "value"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Binary.IBinaryWriter.WriteNumber(System.Int32)">
            <summary>
              Writes an integer. It saves the number with the least required bytes
            </summary>
            <param name = "number"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Binary.IBinaryWriter.WriteNumbers(System.Int32[])">
            <summary>
              Writes an array of numbers. It saves numbers with the least required bytes
            </summary>
            <param name = "numbers"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Binary.IBinaryWriter.Open(System.IO.Stream)">
            <summary>
              Opens the stream for writing
            </summary>
            <param name = "stream"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Binary.IBinaryWriter.Close">
            <summary>
              Saves the data to the stream, the stream is not closed and can be further used
            </summary>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BurstBinaryReader">
            <summary>
              Reads data which was stored with the BurstBinaryWriter
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BurstBinaryReader.#ctor(SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Serializing.ITypeNameConverter,System.Text.Encoding)">
            <summary>
            </summary>
            <param name = "typeNameConverter"></param>
            <param name = "encoding"></param>
            <exception cref = "T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BurstBinaryReader.ReadName">
            <summary>
              Reads property name
            </summary>
            <returns></returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BurstBinaryReader.ReadElementId">
            <summary>
              Reads single byte
            </summary>
            <returns></returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BurstBinaryReader.ReadType">
            <summary>
              Read type
            </summary>
            <returns></returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BurstBinaryReader.ReadNumber">
            <summary>
              Read integer which was saved as 1,2 or 4 bytes, according to its size
            </summary>
            <returns></returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BurstBinaryReader.ReadNumbers">
            <summary>
              Read array of integers which were saved as 1,2 or 4 bytes, according to their size
            </summary>
            <returns>Empty array if there are no indexes</returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BurstBinaryReader.ReadValue(System.Type)">
            <summary>
              Reads simple value (value of a simple property)
            </summary>
            <param name = "expectedType"></param>
            <returns></returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BurstBinaryReader.Open(System.IO.Stream)">
            <summary>
              Opens the stream for reading
            </summary>
            <param name = "stream"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BurstBinaryReader.Close">
            <summary>
              Does nothing, the stream can be further used and has to be manually closed
            </summary>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BurstBinaryWriter">
            <summary>
                Stores data in a binary format. All types and property names which describe an object are stored together with the
                object.
                If there are more objects to store, their types are multiple stored, what increases the file size.
                This format is simple and has small overhead.
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BurstBinaryWriter.#ctor(SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Serializing.ITypeNameConverter,System.Text.Encoding)">
            <summary>
            </summary>
            <param name="typeNameConverter"></param>
            <param name="encoding"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BurstBinaryWriter.WriteElementId(System.Byte)">
            <summary>
                Writes Element Id
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BurstBinaryWriter.WriteNumber(System.Int32)">
            <summary>
                Writes an integer. It saves the number with the least required bytes
            </summary>
            <param name="number"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BurstBinaryWriter.WriteNumbers(System.Int32[])">
            <summary>
                Writes an array of numbers. It saves numbers with the least required bytes
            </summary>
            <param name="numbers"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BurstBinaryWriter.WriteType(System.Type)">
            <summary>
                Writes type
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BurstBinaryWriter.WriteName(System.String)">
            <summary>
                Writes property name
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BurstBinaryWriter.WriteValue(System.Object)">
            <summary>
                Writes a simple value (value of a simple property)
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BurstBinaryWriter.Open(System.IO.Stream)">
            <summary>
                Opens the stream for writing
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BurstBinaryWriter.Close">
            <summary>
                Saves the data to the stream, the stream is not closed and can be further used
            </summary>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Deserializing.IPropertyDeserializer">
            <summary>
              Deserializes a stream and gives back a Property
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Deserializing.IPropertyDeserializer.Open(System.IO.Stream)">
            <summary>
              Open the stream to read
            </summary>
            <param name = "stream"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Deserializing.IPropertyDeserializer.Deserialize">
            <summary>
              Reading the stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Deserializing.IPropertyDeserializer.Close">
            <summary>
              Cleans all
            </summary>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.PropertyCache">
            <summary>
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.PropertyCache.TryGetPropertyInfos(System.Type)">
            <summary>
            </summary>
            <returns>null if the key was not found</returns>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.PropertyProvider">
            <summary>
                Provides properties to serialize from source object.
            </summary>
            <remarks>
                Its methods <see cref="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.PropertyProvider.GetAllProperties(System.Type)" /> and <see cref="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.PropertyProvider.IgnoreProperty(SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.InternalTypeInfo,System.Reflection.PropertyInfo)" /> can be overwritten in an inherited
                class to customize its functionality.
            </remarks>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.PropertyProvider.GetProperties(SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.InternalTypeInfo)">
            <summary>
                Gives all properties back which:
                - are public
                - are not static
                - does not contain ExcludeFromSerializationAttribute
                - have their set and get accessors
                - are not indexers
            </summary>
            <param name="typeInfo"></param>
            <returns></returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.PropertyProvider.IgnoreProperty(SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.InternalTypeInfo,System.Reflection.PropertyInfo)">
            <summary>
                Should the property be removed from serialization?
            </summary>
            <param name="info"></param>
            <param name="property"></param>
            <returns>
                true if the property:
                - is in the PropertiesToIgnore,
                - contains ExcludeFromSerializationAttribute,
                - does not have it's set or get accessor
                - is indexer
            </returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.PropertyProvider.GetAllProperties(System.Type)">
            <summary>
                Gives all properties back which:
                - are public
                - are not static (instance properties)
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Serializing.IPropertySerializer">
            <summary>
              Serializes property to a stream
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Serializing.IPropertySerializer.Open(System.IO.Stream)">
            <summary>
              Open the stream for writing
            </summary>
            <param name = "stream"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Serializing.IPropertySerializer.Serialize(SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Property)">
            <summary>
              Serializes property
            </summary>
            <param name = "property"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Serializing.IPropertySerializer.Close">
            <summary>
              Cleaning, but the stream can be used further
            </summary>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Serializing.ITypeNameConverter">
            <summary>
              Converts Type to its string representation and vice versa. The default instance used in the Framework is TypeNameConverter
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Serializing.ITypeNameConverter.ConvertToTypeName(System.Type)">
            <summary>
              Gives back Type as text.
            </summary>
            <param name = "type"></param>
            <returns>string.Empty if the type is null</returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Serializing.ITypeNameConverter.ConvertToType(System.String)">
            <summary>
              Gives back Type from the text.
            </summary>
            <param name = "typeName"></param>
            <returns></returns>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Serializing.PropertySerializer">
            <summary>
              Base class for all Serializers (Xml, Binary, ...). XmlPropertySerializer inherits from this class
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Serializing.PropertySerializer.Serialize(SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Property)">
            <summary>
              Serializes property
            </summary>
            <param name = "property"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Serializing.PropertySerializer.Open(System.IO.Stream)">
            <summary>
              Open the stream for writing
            </summary>
            <param name = "stream"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Serializing.PropertySerializer.Close">
            <summary>
              Cleaning, but the stream can be used further
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Serializing.PropertySerializer.SerializeCore(SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.PropertyTypeInfo{SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Property})">
            <summary>
            </summary>
            <param name = "property"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Serializing.PropertySerializer.SerializeNullProperty(SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.PropertyTypeInfo{SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.NullProperty})">
            <summary>
            </summary>
            <param name = "property"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Serializing.PropertySerializer.SerializeSimpleProperty(SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.PropertyTypeInfo{SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.SimpleProperty})">
            <summary>
            </summary>
            <param name = "property"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Serializing.PropertySerializer.SerializeMultiDimensionalArrayProperty(SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.PropertyTypeInfo{SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.MultiDimensionalArrayProperty})">
            <summary>
            </summary>
            <param name = "property"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Serializing.PropertySerializer.SerializeSingleDimensionalArrayProperty(SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.PropertyTypeInfo{SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.SingleDimensionalArrayProperty})">
            <summary>
            </summary>
            <param name = "property"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Serializing.PropertySerializer.SerializeDictionaryProperty(SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.PropertyTypeInfo{SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.DictionaryProperty})">
            <summary>
            </summary>
            <param name = "property"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Serializing.PropertySerializer.SerializeCollectionProperty(SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.PropertyTypeInfo{SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.CollectionProperty})">
            <summary>
            </summary>
            <param name = "property"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Serializing.PropertySerializer.SerializeComplexProperty(SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.PropertyTypeInfo{SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ComplexProperty})">
            <summary>
            </summary>
            <param name = "property"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Serializing.PropertySerializer.SerializeReference(SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ReferenceTargetProperty)">
            <summary>
            
            </summary>
            <param name="referenceTarget"></param>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.SizeOptimizedBinaryReader">
            <summary>
              Reads data which was stored with SizeOptimizedBinaryWriter
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.SizeOptimizedBinaryReader.#ctor(SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Serializing.ITypeNameConverter,System.Text.Encoding)">
            <summary>
            </summary>
            <param name = "typeNameConverter"></param>
            <param name = "encoding"></param>
            <exception cref = "T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.SizeOptimizedBinaryReader.ReadElementId">
            <summary>
              Reads single byte
            </summary>
            <returns></returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.SizeOptimizedBinaryReader.ReadType">
            <summary>
              Read type
            </summary>
            <returns></returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.SizeOptimizedBinaryReader.ReadNumber">
            <summary>
              Read integer which was saved as 1,2 or 4 bytes, according to its size
            </summary>
            <returns></returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.SizeOptimizedBinaryReader.ReadNumbers">
            <summary>
              Read array of integers which were saved as 1,2 or 4 bytes, according to their size
            </summary>
            <returns></returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.SizeOptimizedBinaryReader.ReadName">
            <summary>
              Reads property name
            </summary>
            <returns></returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.SizeOptimizedBinaryReader.ReadValue(System.Type)">
            <summary>
              Reads simple value (value of a simple property)
            </summary>
            <param name = "expectedType"></param>
            <returns></returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.SizeOptimizedBinaryReader.Open(System.IO.Stream)">
            <summary>
              Opens the stream for reading
            </summary>
            <param name = "stream"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.SizeOptimizedBinaryReader.Close">
            <summary>
              Does nothing, the stream can be further used and has to be manually closed
            </summary>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.SizeOptimizedBinaryWriter">
            <summary>
              Stores data in a binary format. Data is stored in two steps. At first are all objects stored in a cache and all types are analyzed. 
              Then all types and property names are sorted and placed in a list. Duplicates are removed. Serialized objects contain references
              to these types and property names. It decreases file size, especially for serialization of collection (many items of the same type)
              <see cref="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.SizeOptimizedBinaryWriter"/> has bigger overhead than <see cref="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BurstBinaryWriter"/>
            </summary>
            <seealso cref="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Binary.IBinaryWriter"/>
            <seealso cref="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BurstBinaryWriter"/>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.SizeOptimizedBinaryWriter.#ctor(SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Serializing.ITypeNameConverter,System.Text.Encoding)">
            <summary>
            </summary>
            <param name = "typeNameConverter"></param>
            <param name = "encoding"></param>
            <exception cref = "T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.SizeOptimizedBinaryWriter.WriteElementId(System.Byte)">
            <summary>
              Writes Property Id
            </summary>
            <param name = "id"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.SizeOptimizedBinaryWriter.WriteType(System.Type)">
            <summary>
              Writes type
            </summary>
            <param name = "type"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.SizeOptimizedBinaryWriter.WriteName(System.String)">
            <summary>
              Writes property name
            </summary>
            <param name = "name"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.SizeOptimizedBinaryWriter.WriteValue(System.Object)">
            <summary>
              Writes a simple value (value of a simple property)
            </summary>
            <param name = "value"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.SizeOptimizedBinaryWriter.WriteNumber(System.Int32)">
            <summary>
              Writes an integer. It saves the number with the least required bytes
            </summary>
            <param name = "number"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.SizeOptimizedBinaryWriter.WriteNumbers(System.Int32[])">
            <summary>
              Writes an array of numbers. It saves numbers with the least required bytes
            </summary>
            <param name = "numbers"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.SizeOptimizedBinaryWriter.Open(System.IO.Stream)">
            <summary>
              Opens the stream for writing
            </summary>
            <param name = "stream"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.SizeOptimizedBinaryWriter.Close">
            <summary>
              Saves the data to the stream, the stream is not closed and can be further used
            </summary>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.TypeNameConverter">
            <summary>
                Converts Type to its text representation and vice versa. All types serialize to the
                AssemblyQualifiedName. Use overloaded constructor to shorten type names.
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.TypeNameConverter.#ctor">
            <summary>
                Since v.2.12 as default the type name is equal to Type.AssemblyQualifiedName
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.TypeNameConverter.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Some values from the Type.AssemblyQualifiedName can be removed
            </summary>
            <param name="includeAssemblyVersion"></param>
            <param name="includeCulture"></param>
            <param name="includePublicKeyToken"></param>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.TypeNameConverter.IncludeAssemblyVersion">
            <summary>
                Version=x.x.x.x will be inserted to the type name
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.TypeNameConverter.IncludeCulture">
            <summary>
                Culture=.... will be inserted to the type name
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.TypeNameConverter.IncludePublicKeyToken">
            <summary>
                PublicKeyToken=.... will be inserted to the type name
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.TypeNameConverter.ConvertToTypeName(System.Type)">
            <summary>
                Gives type as text
            </summary>
            <param name="type"></param>
            <returns>string.Empty if the type is null</returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.TypeNameConverter.ConvertToType(System.String)">
            <summary>
                Gives back Type from the text.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.BinarySettings">
            <summary>
                All the most important settings for binary serialization
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.BinarySettings.#ctor">
            <summary>
                Default constructor. Serialization in <see cref="F:SafeOrbit.Memory.SafeObject.SharpSerializer.BinarySerializationMode.SizeOptimized" /> mode.
                For other modes choose an overloaded constructor
            </summary>
            <seealso cref="T:SafeOrbit.Memory.SafeObject.SharpSerializer.BinarySerializationMode" />
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.BinarySettings.#ctor(SafeOrbit.Memory.SafeObject.SharpSerializer.BinarySerializationMode)">
            <summary>
                Overloaded constructor. Chooses mode in which the data is serialized.
            </summary>
            <param name="mode">
                <p>
                    <see cref="F:SafeOrbit.Memory.SafeObject.SharpSerializer.BinarySerializationMode.SizeOptimized" /> - all types are stored in a header, objects only reference
                    these types (better for collections).
                </p>
                <p>
                    <see cref="F:SafeOrbit.Memory.SafeObject.SharpSerializer.BinarySerializationMode.Burst" /> - all types are serialized with their objects (better for
                    serializing of single objects).
                </p>
            </param>
            <seealso cref="T:SafeOrbit.Memory.SafeObject.SharpSerializer.BinarySerializationMode" />
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.BinarySettings.Encoding">
            <summary>
                How are strings serialized. Default is UTF-8.
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.BinarySettings.Mode">
            <summary>
                Default is  <see cref="F:SafeOrbit.Memory.SafeObject.SharpSerializer.BinarySerializationMode.SizeOptimized" /> - Types and property names are stored in a header.
                The opposite is <see cref="F:SafeOrbit.Memory.SafeObject.SharpSerializer.BinarySerializationMode.Burst" /> mode when all
                types are serialized with their objects.
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.AdvancedSerializerSettings.RootName">
            <summary>
                What name has the root item of your serialization. Default is "Root".
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.AdvancedSerializerSettings.TypeNameConverter">
            <summary>
                Converts Type to string and vice versa. Default is an instance of TypeNameConverter which serializes Types as "type
                name, assembly name"
                If you want to serialize your objects as fully qualified assembly name, you should set this setting with an
                instance of TypeNameConverter
                with overloaded constructor.
            </summary>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ArrayAnalyzer">
            <summary>
              Gives information about actually analyzed array (from the constructor)
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ArrayAnalyzer.#ctor(System.Object)">
            <summary>
            </summary>
            <param name = "array"></param>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ArrayAnalyzer.ArrayInfo">
            <summary>
              Contains extended information about the current array
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ArrayAnalyzer.GetRank(System.Type)">
            <summary>
              How many dimensions. There can be at least 1
            </summary>
            <returns></returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ArrayAnalyzer.GetLength(System.Int32,System.Type)">
            <summary>
              How many items in one dimension
            </summary>
            <param name = "dimension">0-based</param>
            <returns></returns>
            <param name="arrayType"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ArrayAnalyzer.GetLowerBound(System.Int32,System.Type)">
            <summary>
              Lower index of an array. Default is 0.
            </summary>
            <param name = "dimension">0-based</param>
            <returns></returns>
            <param name="arrayType"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ArrayAnalyzer.GetIndexes">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ArrayAnalyzer.GetValues">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ArrayAnalyzer.ForEach(System.Action{System.Int32[]})">
            <summary>
            </summary>
            <param name = "action"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ArrayAnalyzer.ForEach(System.Collections.Generic.IList{SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.DimensionInfo},System.Int32,System.Collections.Generic.IEnumerable{System.Int32},System.Action{System.Int32[]})">
            <summary>
              This function will be recursively used
            </summary>
            <param name = "dimensionInfos"></param>
            <param name = "dimension"></param>
            <param name = "coordinates"></param>
            <param name = "action"></param>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ArrayInfo">
            <summary>
              Contain info about array (i.e. how many dimensions, lower/upper bounds)
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ArrayInfo.DimensionInfos">
            <summary>
            </summary>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.BinaryReaderTools">
            <summary>
              Some methods which are used by IBinaryReader
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.BinaryReaderTools.ReadString(System.IO.BinaryReader)">
            <summary>
            </summary>
            <param name = "reader"></param>
            <returns></returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.BinaryReaderTools.ReadNumber(System.IO.BinaryReader)">
            <summary>
            </summary>
            <param name = "reader"></param>
            <returns></returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.BinaryReaderTools.ReadNumbers(System.IO.BinaryReader)">
            <summary>
            </summary>
            <returns>empty array if there are no indexes</returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.BinaryReaderTools.ReadValue(System.Type,System.IO.BinaryReader)">
            <summary>
            </summary>
            <param name = "expectedType"></param>
            <param name = "reader"></param>
            <returns></returns>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.BinaryWriterTools">
            <summary>
                Some methods which are used by IBinaryWriter
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.BinaryWriterTools.WriteNumber(System.Int32,System.IO.BinaryWriter)">
            <summary>
            </summary>
            <param name="number"></param>
            <param name="writer"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.BinaryWriterTools.WriteNumbers(System.Int32[],System.IO.BinaryWriter)">
            <summary>
            </summary>
            <param name="numbers"></param>
            <param name="writer"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.BinaryWriterTools.WriteValue(System.Object,System.IO.BinaryWriter)">
            <summary>
            </summary>
            <param name="value"></param>
            <param name="writer"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.BinaryWriterTools.WriteString(System.String,System.IO.BinaryWriter)">
            <summary>
                BinaryWriter.Write(string...) can not be used as it produces exception if the text is null.
            </summary>
            <param name="text"></param>
            <param name="writer"></param>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.Elements">
            <summary>
                These elements are used during the binary serialization. They should be unique from SubElements and Attributes.
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.Elements.Collection">
            <summary>
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.Elements.ComplexObject">
            <summary>
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.Elements.Dictionary">
            <summary>
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.Elements.MultiArray">
            <summary>
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.Elements.Null">
            <summary>
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.Elements.SimpleObject">
            <summary>
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.Elements.SingleArray">
            <summary>
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.Elements.ComplexObjectWithId">
            <summary>
                For binary compatibility reason extra type-id: same as ComplexObjectWith, but contains
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.Elements.Reference">
            <summary>
                reference to previously serialized  ComplexObjectWithId
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.Elements.CollectionWithId">
            <summary>
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.Elements.DictionaryWithId">
            <summary>
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.Elements.SingleArrayWithId">
            <summary>
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.Elements.MultiArrayWithId">
            <summary>
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.Elements.IsElementWithId(System.Byte)">
            <summary>
            </summary>
            <param name="elementId"></param>
            <returns></returns>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.SubElements">
            <summary>
                These elements are used during the binary serialization. They should be unique from Elements and Attributes.
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.SubElements.Dimension">
            <summary>
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.SubElements.Dimensions">
            <summary>
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.SubElements.Item">
            <summary>
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.SubElements.Items">
            <summary>
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.SubElements.Properties">
            <summary>
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.SubElements.Unknown">
            <summary>
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.SubElements.Eof">
            <summary>
            </summary>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.Attributes">
            <summary>
                These attributes are used during the binary serialization. They should be unique from Elements and SubElements.
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.Attributes.DimensionCount">
            <summary>
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.Attributes.ElementType">
            <summary>
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.Attributes.Indexes">
            <summary>
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.Attributes.KeyType">
            <summary>
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.Attributes.Length">
            <summary>
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.Attributes.LowerBound">
            <summary>
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.Attributes.Name">
            <summary>
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.Attributes.Type">
            <summary>
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.Attributes.Value">
            <summary>
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.Attributes.ValueType">
            <summary>
            </summary>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.NumberSize">
            <summary>
                How many bytes occupies a number value
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.NumberSize.Zero">
            <summary>
                is zero
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.NumberSize.B1">
            <summary>
                serializes as 1 byte
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.NumberSize.B2">
            <summary>
                serializes as 2 bytes
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.NumberSize.B4">
            <summary>
                serializes as 4 bytes
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.NumberSize.GetNumberSize(System.Int32)">
            <summary>
                Gives the least required byte amount to store the number
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.IndexGenerator`1">
            <summary>
                Is used to store types and property names in lists. Contains only unique elements and gives index of the item back.
                During deserialization this index is read from stream and then replaced with an appropriate value from the list.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Binary.IndexGenerator`1.GetIndexOfItem(`0)">
            <summary>
                if the item exist, it gives its index back, otherwise the item is added and its new index is given back
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.CreatingInstanceException">
            <summary>
              Occurs if no instance of a type can be created. Maybe the type lacks on a public standard (parameterless) constructor?
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.CreatingInstanceException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.CreatingInstanceException.#ctor(System.String)">
            <summary>
            </summary>
            <param name = "message"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.CreatingInstanceException.#ctor(System.String,System.Exception)">
            <summary>
            </summary>
            <param name = "message"></param>
            <param name = "innerException"></param>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.DefaultInitializer">
            <summary>
              Gives standard settings for the framework. Is used only internally.
            </summary>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.DeserializingException">
            <summary>
                Can occur during deserialization
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.DeserializingException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.DeserializingException.#ctor(System.String)">
            <summary>
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.DeserializingException.#ctor(System.String,System.Exception)">
            <summary>
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.CollectionProperty">
            <summary>
                Represents type which is ICollection
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.CollectionProperty.#ctor(System.String,System.Type)">
            <summary>
            </summary>
            <param name="name"></param>
            <param name="type"></param>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.CollectionProperty.Items">
            <summary>
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.CollectionProperty.ElementType">
            <summary>
                Of what type are items. It's important for polymorphic collection
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.CollectionProperty.MakeFlatCopyFrom(SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ReferenceTargetProperty)">
            <summary>
                Makes flat copy (only references) of vital properties
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.CollectionProperty.GetPropertyArt">
            <summary>
                Gets the property art.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ComplexProperty">
            <summary>
                Represents complex type which contains properties.
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ComplexProperty.#ctor(System.String,System.Type)">
            <summary>
            </summary>
            <param name="name"></param>
            <param name="type"></param>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ComplexProperty.Properties">
            <summary>
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ComplexProperty.MakeFlatCopyFrom(SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ReferenceTargetProperty)">
            <summary>
                Makes flat copy (only references) of vital properties
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ComplexProperty.GetPropertyArt">
            <summary>
                Gets the property art.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.DictionaryProperty">
            <summary>
                Represents dictionary. Every item is composed of the key and value
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.DictionaryProperty.#ctor(System.String,System.Type)">
            <summary>
            </summary>
            <param name="name"></param>
            <param name="type"></param>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.DictionaryProperty.Items">
            <summary>
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.DictionaryProperty.KeyType">
            <summary>
                Of what type are keys
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.DictionaryProperty.ValueType">
            <summary>
                Of what type are values
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.DictionaryProperty.MakeFlatCopyFrom(SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ReferenceTargetProperty)">
            <summary>
                Makes flat copy (only references) of vital properties
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.DictionaryProperty.GetPropertyArt">
            <summary>
                Gets the property art.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.DimensionInfo">
            <summary>
                Every array is composed of dimensions. Single dimensional arrays have only one info,
                multidimensional have more dimension infos.
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.DimensionInfo.LowerBound">
            <summary>
                Start index for the array
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.DimensionInfo.Length">
            <summary>
                How many items are in this dimension
            </summary>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.KeyValueItem">
            <summary>
                Represents one item from the dictionary, a key-value pair.
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.KeyValueItem.#ctor(SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Property,SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Property)">
            <summary>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.KeyValueItem.Key">
            <summary>
                Represents key. There can be everything
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.KeyValueItem.Value">
            <summary>
                Represents value. There can be everything
            </summary>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.MultiDimensionalArrayItem">
            <summary>
                Information about one item in a multidimensional array
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.MultiDimensionalArrayItem.#ctor(System.Int32[],SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Property)">
            <summary>
            </summary>
            <param name="indexes"></param>
            <param name="value"></param>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.MultiDimensionalArrayItem.Indexes">
            <summary>
                Represents item coordinates in the array (i.e. [1,5,3] - item has index 1 in the dimension 0, index 5 in the
                dimension 1 and index 3 in the dimension 2).
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.MultiDimensionalArrayItem.Value">
            <summary>
                Item value. It can contain any type.
            </summary>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.MultiDimensionalArrayProperty">
            <summary>
                Represents multidimensional array. Array properties are in DimensionInfos
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.MultiDimensionalArrayProperty.#ctor(System.String,System.Type)">
            <summary>
            </summary>
            <param name="name"></param>
            <param name="type"></param>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.MultiDimensionalArrayProperty.Items">
            <summary>
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.MultiDimensionalArrayProperty.DimensionInfos">
            <summary>
                Information about the array
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.MultiDimensionalArrayProperty.ElementType">
            <summary>
                Of what type are elements. All elements in all all dimensions must be inheritors of this type.
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.MultiDimensionalArrayProperty.MakeFlatCopyFrom(SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ReferenceTargetProperty)">
            <summary>
                Makes flat copy (only references) of vital properties
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.MultiDimensionalArrayProperty.GetPropertyArt">
            <summary>
                Gets the property art.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.NullProperty">
            <summary>
                Represents the null value. Null values are serialized too.
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.NullProperty.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.NullProperty.#ctor(System.String)">
            <summary>
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.NullProperty.GetPropertyArt">
            <summary>
                Gets the property art.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Property">
            <summary>
                Base class for all properties. Every object can be defined with inheritors of the Property class.
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Property.#ctor(System.String,System.Type)">
            <summary>
            </summary>
            <param name="name"></param>
            <param name="type"></param>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Property.Name">
            <summary>
                Not all properties have name (i.e. items of a collection)
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Property.Type">
            <summary>
                Of what type is the property or its value
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Property.Parent">
            <summary>
                If the properties are nested, i.e. collection items are nested in the collection
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Property.Art">
            <summary>
                Of what art is the property.
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Property.GetPropertyArt">
            <summary>
                Gets the property art.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Property.CreateInstance(SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.PropertyArt,System.String,System.Type)">
            <summary>
                Creates property from PropertyArt
            </summary>
            <param name="art"></param>
            <param name="propertyName"></param>
            <param name="propertyType"></param>
            <returns>null if PropertyArt.Reference is requested</returns>
            <exception cref="T:System.InvalidOperationException">If unknown PropertyArt requested</exception>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Property.ToString">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.PropertyArt">
            <summary>
                Of what art is the property
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.PropertyArt.Unknown">
            <summary>
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.PropertyArt.Simple">
            <summary>
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.PropertyArt.Complex">
            <summary>
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.PropertyArt.Collection">
            <summary>
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.PropertyArt.Dictionary">
            <summary>
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.PropertyArt.SingleDimensionalArray">
            <summary>
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.PropertyArt.MultiDimensionalArray">
            <summary>
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.PropertyArt.Null">
            <summary>
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.PropertyArt.Reference">
            <summary>
            </summary>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.PropertyCollection">
            <summary>
                It represents some properties of an object, or some items of a collection/dictionary/array
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.PropertyCollection.Parent">
            <summary>
                Parent property
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.PropertyCollection.ClearItems">
            <summary>
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.PropertyCollection.InsertItem(System.Int32,SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Property)">
            <summary>
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.PropertyCollection.RemoveItem(System.Int32)">
            <summary>
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.PropertyCollection.SetItem(System.Int32,SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Property)">
            <summary>
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ReferenceInfo">
            <summary>
                Provides information about property references
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ReferenceInfo.#ctor">
            <summary>
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ReferenceInfo.Count">
            <summary>
                How many references to the same object
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ReferenceInfo.Id">
            <summary>
                Every Object must have a unique Id
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ReferenceInfo.IsProcessed">
            <summary>
                During serialization is true if the target object was already serialized.
                Then the target must not be serialized again. Only its reference must be created.
                During deserialization it means, the target object was parsed and read
                from the stream. It can be further used to resolve its references.
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ReferenceInfo.ToString">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ReferenceTargetProperty">
            <summary>
                All properties derived from this property can be a target of a reference
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ReferenceTargetProperty.#ctor(System.String,System.Type)">
            <summary>
            </summary>
            <param name="name"></param>
            <param name="type"></param>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ReferenceTargetProperty.Reference">
            <summary>
                Information about the References for this property
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ReferenceTargetProperty.MakeFlatCopyFrom(SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ReferenceTargetProperty)">
            <summary>
                Makes flat copy (only references) of vital properties
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ReferenceTargetProperty.ToString">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.SimpleProperty">
            <summary>
                Represents all primitive types (i.e. int, double...) and additionally
                DateTime, TimeSpan, Decimal und enumerations
                Contains no nested properties
            </summary>
            <remarks>
                See SimpleValueConverter for a list of supported types.
            </remarks>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.SimpleProperty.#ctor(System.String,System.Type)">
            <summary>
            </summary>
            <param name="name"></param>
            <param name="type"></param>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.SimpleProperty.Value">
            <summary>
                It could only one of the simple types, see Tools.IsSimple(...)
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.SimpleProperty.GetPropertyArt">
            <summary>
                Gets the property art.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.SimpleProperty.ToString">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.SingleDimensionalArrayProperty">
            <summary>
                Represents one dimensional array
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.SingleDimensionalArrayProperty.#ctor(System.String,System.Type)">
            <summary>
            </summary>
            <param name="name"></param>
            <param name="type"></param>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.SingleDimensionalArrayProperty.Items">
            <summary>
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.SingleDimensionalArrayProperty.LowerBound">
            <summary>
                As default is 0, but there can be higher start index
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.SingleDimensionalArrayProperty.ElementType">
            <summary>
                Of what type are elements
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.SingleDimensionalArrayProperty.MakeFlatCopyFrom(SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.ReferenceTargetProperty)">
            <summary>
                Makes flat copy (only references) of vital properties
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.SingleDimensionalArrayProperty.GetPropertyArt">
            <summary>
                Gets the property art.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.SerializerSettings`1">
            <summary>
                Base class for the settings of the SharpSerializer. Is passed to its constructor.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.SerializerSettings`1.#ctor">
            <summary>
                IncludeAssemblyVersionInTypeName, IncludeCultureInTypeName and IncludePublicKeyTokenInTypeName are true
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.SerializerSettings`1.AdvancedSettings">
            <summary>
                Contains mostly classes from the namespace Polenter.Serialization.Advanced
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.SerializerSettings`1.IncludeAssemblyVersionInTypeName">
            <summary>
                Version=x.x.x.x will be inserted to the type name
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.SerializerSettings`1.IncludeCultureInTypeName">
            <summary>
                Culture=.... will be inserted to the type name
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.SerializerSettings`1.IncludePublicKeyTokenInTypeName">
            <summary>
                PublicKeyToken=.... will be inserted to the type name
            </summary>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.SimpleValueParsingException">
            <summary>
                Occurs if the simple value can not be restored from its text representation
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.SimpleValueParsingException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.SimpleValueParsingException.#ctor(System.String)">
            <summary>
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.SimpleValueParsingException.#ctor(System.String,System.Exception)">
            <summary>
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Tools">
            <summary>
                Some help functions for the serializing framework. As these functions are complexer
                they can be converted to single classes.
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Tools.IsSimple(System.Type)">
            <summary>
                Is the simple type (string, DateTime, TimeSpan, Decimal, Enumeration or other primitive type)
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Tools.IsEnumerable(System.Type)">
            <summary>
                Is type an IEnumerable
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Tools.IsCollection(System.Type)">
            <summary>
                Is type ICollection
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Tools.IsDictionary(System.Type)">
            <summary>
                Is type IDictionary
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Tools.IsArray(System.Type)">
            <summary>
                Is it array? It does not matter if single dimensional or multidimensional
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Tools.CreateInstance(System.Type)">
            <summary>
                Creates instance from type. There must be a standard constructor (without parameters) in the type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Deserializing.ObjectFactory">
            <summary>
                Takes Property and converts it to an object
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Deserializing.ObjectFactory._objectCache">
            <summary>
                Contains already created objects. Is used for reference resolving.
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Deserializing.ObjectFactory.CreateObject(SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Property)">
            <summary>
                Builds object from property
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Deserializing.ObjectFactory.CreateObjectFromDictionaryProperty(SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.DictionaryProperty)">
            <summary>
                Items will be added only if the "Add" method was found, which exactly 2 parameters (key, value) has
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Deserializing.ObjectFactory.FillProperties(System.Object,System.Collections.Generic.IEnumerable{SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.Property})">
            <summary>
                Fill properties of the class or structure
            </summary>
            <param name="obj"></param>
            <param name="properties"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Deserializing.ObjectFactory.GetMultiDimensionalArrayCreatingInfo(System.Collections.Generic.IEnumerable{SafeOrbit.Infrastructure.Serialization.SerializationServices.Core.DimensionInfo})">
            <summary>
                This internal class helps to instantiate the multidimensional array
            </summary>
            <param name="infos"></param>
            <returns></returns>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.InternalTypeInfo">
            <summary>
                Gives extended information about a Type
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.InternalTypeInfo._cache">
            <summary>
                Cache stores type info and spares time be recall the info every time it is needed
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.InternalTypeInfo.IsSimple">
            <summary>
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.InternalTypeInfo.IsArray">
            <summary>
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.InternalTypeInfo.IsEnumerable">
            <summary>
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.InternalTypeInfo.IsCollection">
            <summary>
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.InternalTypeInfo.IsDictionary">
            <summary>
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.InternalTypeInfo.ElementType">
            <summary>
                Of what type are elements of Array, Collection or values in a Dictionary
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.InternalTypeInfo.KeyType">
            <summary>
                Of what type are dictionary keys
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.InternalTypeInfo.ArrayDimensionCount">
            <summary>
                Valid dimensions start with 1
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.InternalTypeInfo.Type">
            <summary>
                Property type
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.InternalTypeInfo.GetTypeInfo(System.Object)">
            <summary>
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.InternalTypeInfo.GetTypeInfo(System.Type)">
            <summary>
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.InternalTypeInfo.FillKeyAndElementType(SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.InternalTypeInfo,System.Type)">
            <summary>
                Fills the <see cref="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.InternalTypeInfo.KeyType" /> and <see cref="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.InternalTypeInfo.ElementType" /> properties
                to target <see paramref="target" /> from <paramref name="source" />.
            </summary>
            <returns><c>TRUE</c> if the key and value definition was found, otherwise <c>FALSE</c></returns>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.PropertyFactory">
            <summary>
                Decomposes object to a Property and its Subproperties
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.PropertyFactory._propertyCache">
            <summary>
                Contains reference targets.
            </summary>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.PropertyFactory._currentReferenceId">
            <summary>
                It will be incremented as neccessary
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.PropertyFactory.#ctor(SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.PropertyProvider)">
            <summary>
            </summary>
            <param name="propertyProvider">provides all important properties of the decomposed object</param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.PropertyFactory.CreateProperty(System.String,System.Object)">
            <summary>
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns>NullProperty if the value is null</returns>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.PropertyTypeInfo`1">
            <summary>
              Contains info about property and its type.
              It is of use to avoid double type definitions.
            </summary>
            <typeparam name = "TProperty"></typeparam>
            <remarks>
              During serialization is each property wrapped in this class.
              there is no need to define type of every array element if there is a global ElementType type defined
              and each array element type is equal to that global ElementType
              In such a case ElementType is stored in ExpectedPropertyType, ValueType contains null.
            </remarks>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.PropertyTypeInfo`1.#ctor(`0,System.Type)">
            <summary>
            </summary>
            <param name = "property"></param>
            <param name = "valueType"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.PropertyTypeInfo`1.#ctor(`0,System.Type,System.Type)">
            <summary>
            </summary>
            <param name = "property"></param>
            <param name = "expectedPropertyType"></param>
            <param name = "valueType"></param>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.PropertyTypeInfo`1.ExpectedPropertyType">
            <summary>
              Of what type should be this property
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.PropertyTypeInfo`1.ValueType">
            <summary>
              Of what type is the property value. If it is null - then the value type is equal to expectedPropertyType
              and does not need to be additionally serialized
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.PropertyTypeInfo`1.Name">
            <summary>
              Property name
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.PropertyTypeInfo`1.Property">
            <summary>
              Property itself
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.TypeInfoCollection.TryGetTypeInfo(System.Type)">
            <summary>
            </summary>
            <returns>null if the key was not found</returns>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.TypeInfoCollection.GetKeyForItem(SafeOrbit.Infrastructure.Serialization.SerializationServices.Serializing.InternalTypeInfo)">
            <summary>
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.SharpSerializer">
            <summary>
                This is the main class of SharpSerializer. It serializes and deserializes objects.
                SafeOrbit SharpSerializer is modified and is not the same as the original.
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.SharpSerializer.#ctor">
            <summary>
                Standard Constructor for binary serialization.
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.SharpSerializer.#ctor(SafeOrbit.Infrastructure.Serialization.SerializationServices.BinarySettings)">
            <summary>
                Binary serialization with custom settings
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.SharpSerializer.#ctor(SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Serializing.IPropertySerializer,SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.Deserializing.IPropertyDeserializer)">
            <summary>
                Custom serializer and deserializer
            </summary>
            <param name="serializer"></param>
            <param name="deserializer"></param>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.SharpSerializer.PropertyProvider">
            <summary>
                Default it is an instance of PropertyProvider. It provides all properties to serialize.
                You can use an Inheritor and overwrite its GetAllProperties and IgnoreProperty methods to implement your custom
                rules.
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.SerializationServices.SharpSerializer.RootName">
            <summary>
                What name should have the root property. Default is "Root".
            </summary>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.SharpSerializer.Serialize(System.Object,System.IO.Stream)">
            <summary>
                Serializing to the stream. After serialization the stream will NOT be closed.
            </summary>
            <param name="data"></param>
            <param name="stream"></param>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.SerializationServices.SharpSerializer.Deserialize(System.IO.Stream)">
            <summary>
                Deserialization from the stream. After deserialization the stream will NOT be closed.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="F:SafeOrbit.Infrastructure.Serialization.Serializer.BinarySerializer">
            <summary>
                Static instance to re-use for better performance.
            </summary>
        </member>
        <member name="P:SafeOrbit.Infrastructure.Serialization.Serializer.StaticInstance">
            <summary>
                Gets the static instance of <see cref="M:SafeOrbit.Infrastructure.Serialization.Serializer.Serialize(System.Object)" />.
            </summary>
            <value>Value of inner <seealso cref="T:System.Lazy`1" /> instance.</value>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.Serializer.Serialize(System.Object)">
            <summary>
                Serializes the specified object to a byte array.
            </summary>
            <param name="object">The object to serialize.</param>
            <returns>Byte array for the serialization of the object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="object" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:SafeOrbit.Infrastructure.Serialization.Serializer.Deserialize``1(System.Byte[])">
            <summary>
                Deserializes the specified byte array to an object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="byteArray">The byte array to deserialize.</param>
            <returns>Deserialized object from bytes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="byteArray" /> is <see langword="null" />.</exception>
        </member>
        <member name="T:SafeOrbit.Memory.SafeObject.SharpSerializer.BinarySerializationMode">
            <summary>
                What format has the serialized binary file. It could be SizeOptimized or Burst.
            </summary>
        </member>
        <member name="F:SafeOrbit.Memory.SafeObject.SharpSerializer.BinarySerializationMode.SizeOptimized">
            <summary>
                All types are serialized to string lists, which are stored in the file header. Duplicates are removed. Serialized
                objects only reference these types. It reduces size especially if serializing collections. Refer to
                <see cref="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.SizeOptimizedBinaryWriter" /> for more details.
            </summary>
            <seealso cref="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.SizeOptimizedBinaryWriter" />
        </member>
        <member name="F:SafeOrbit.Memory.SafeObject.SharpSerializer.BinarySerializationMode.Burst">
            <summary>
                There are as many type definitions as many objects stored, not regarding if there are duplicate types defined. It
                reduces the overhead if storing single items, but increases the file size if storing collections. See
                <see cref="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BurstBinaryWriter" /> for details.
            </summary>
            <seealso cref="T:SafeOrbit.Infrastructure.Serialization.SerializationServices.Advanced.BurstBinaryWriter" />
        </member>
        <member name="T:SafeOrbit.Memory.InjectionServices.Alerters.RaiseEventAlerter">
            <summary>
                Raises an event.
            </summary>
        </member>
        <member name="T:SafeOrbit.Memory.InjectionServices.Alerters.ThrowExceptionAlerter">
            <summary>
                Throws <see cref="T:SafeOrbit.Exceptions.MemoryInjectionException" />.
            </summary>
        </member>
        <member name="M:SafeOrbit.Memory.InjectionServices.Alerters.ThrowExceptionAlerter.Alert(SafeOrbit.Memory.Injection.IInjectionMessage)">
            <exception cref="T:SafeOrbit.Exceptions.MemoryInjectionException">
                <p>
                    The state of the object has been changed after last validation.
                    <seealso cref="F:SafeOrbit.Memory.InjectionType.VariableInjection" />
                </p>
                <p>
                    The code of the object has been changed after last validation.
                    <seealso cref="F:SafeOrbit.Memory.InjectionType.CodeInjection" />
                </p>
                <p>
                    Both state and the code code of the object has been changed after last validation.
                    <seealso cref="F:SafeOrbit.Memory.InjectionType.CodeAndVariableInjection" />
                </p>
            </exception>
        </member>
        <member name="T:SafeOrbit.Memory.InjectionServices.IAlerts">
            <summary>
                Abstracts a class that alerts memory injections.
            </summary>
        </member>
        <member name="P:SafeOrbit.Memory.InjectionServices.IAlerts.AlertChannel">
            <summary>
                Gets or sets the alert channel.
            </summary>
            <value>The alert channel.</value>
        </member>
        <member name="P:SafeOrbit.Memory.InjectionServices.IAlerts.CanAlert">
            <summary>
                Gets a value indicating whether this instance will alert.
            </summary>
            <value><c>true</c> if this instance will alert; otherwise, <c>false</c>.</value>
            <seealso cref="P:SafeOrbit.Memory.InjectionServices.IAlerts.AlertChannel" />
        </member>
        <member name="T:SafeOrbit.Memory.InjectionServices.IInjectionAlerter">
            <summary>
            Abstract a service that can alert injections using different channels.
            </summary>
        </member>
        <member name="M:SafeOrbit.Memory.InjectionServices.IInjectionAlerter.Alert(SafeOrbit.Memory.Injection.IInjectionMessage,SafeOrbit.Memory.InjectionServices.InjectionAlertChannel)">
            <summary>
            Alerts the specified information using the specified channel.
            </summary>
            <param name="info">Injection information.</param>
            <param name="channel">Alert channel.</param>
        </member>
        <member name="T:SafeOrbit.Memory.InjectionServices.InjectionAlerter">
            <summary>
            Alerts an <see cref="T:SafeOrbit.Memory.Injection.IInjectionMessage"/> using the right <see cref="T:SafeOrbit.Memory.InjectionServices.Alerters.IAlerter"/> instance.
            </summary>
            <seealso cref="T:SafeOrbit.Memory.InjectionServices.IInjectionAlerter" />
            <seealso cref="T:SafeOrbit.Memory.InjectionServices.Alerters.IAlerter"/>
        </member>
        <member name="F:SafeOrbit.Memory.InjectionServices.InjectionAlertChannel.RaiseEvent">
            <summary>
            Raises the <see cref="E:SafeOrbit.Library.SafeOrbitCore.LibraryInjected"/>
            </summary>
            <seealso cref="T:SafeOrbit.Memory.InjectionServices.Alerters.RaiseEventAlerter"/>
        </member>
        <member name="F:SafeOrbit.Memory.InjectionServices.InjectionAlertChannel.ThrowException">
            <summary>
            Throws an exception.
            </summary>
            <seealso cref="T:SafeOrbit.Memory.InjectionServices.Alerters.ThrowExceptionAlerter"/>
        </member>
        <member name="F:SafeOrbit.Memory.InjectionServices.InjectionAlertChannel.DebugFail">
            <summary>
            Fails on debug mode.
            </summary>
            <seealso cref="T:SafeOrbit.Memory.InjectionServices.Alerters.DebugFailAlerter"/>
        </member>
        <member name="F:SafeOrbit.Memory.InjectionServices.InjectionAlertChannel.DebugWrite">
            <summary>
            Logs on debug mode.
            </summary>
            <seealso cref="T:SafeOrbit.Memory.InjectionServices.Alerters.DebugWriteAlerter"/>
        </member>
        <member name="T:SafeOrbit.Memory.InjectionServices.Stampers.IlCodeStamper">
            <inheritdoc />
            <summary>
                Stamps <see cref="T:System.Type" /> of an object by serializing its IL-code.
            </summary>
            <seealso cref="T:SafeOrbit.Memory.InjectionServices.Stampers.StamperBase`1" />
            <seealso cref="T:SafeOrbit.Memory.InjectionServices.Stampers.IStamper`1" />
        </member>
        <member name="T:SafeOrbit.Memory.InjectionServices.Stampers.IStamper`2">
            <summary>
                Abstraction for the service that stamps objects.
            </summary>
            <typeparam name="TObject">Type of object.</typeparam>
            <typeparam name="TStamp">The type of the the stamp.</typeparam>
        </member>
        <member name="T:SafeOrbit.Memory.InjectionServices.Stampers.IStamper`1">
            <summary>
                Abstraction for the service that stamps objects with an <see cref="T:SafeOrbit.Memory.Injection.IStamp`1" /> stamp.
            </summary>
            <typeparam name="TObject">The type of the t object.</typeparam>
        </member>
        <member name="T:SafeOrbit.Memory.InjectionServices.Stampers.StamperBase`1">
            <summary>
                Base class for stampers that returns hash of the bytes from the member class.
            </summary>
        </member>
        <member name="T:SafeOrbit.Memory.InjectionServices.Stampers.StateStamper">
            <inheritdoc />
            <summary>
                Stamps <see cref="T:System.Object" /> by serializing its state.
            </summary>
            <seealso cref="T:SafeOrbit.Memory.InjectionServices.Stampers.StamperBase`1" />
            <seealso cref="T:SafeOrbit.Memory.InjectionServices.Stampers.IStamper`1" />
            <seealso cref="T:SafeOrbit.Infrastructure.Serialization.ISerializer" />
        </member>
        <member name="T:SafeOrbit.Memory.Injection.InjectionDetector">
            <summary>
                <p>Injection protector is a thread-safe class with a state.</p>
                <p>The instance should only be used for single object.</p>
                <p>
                    Each time you call <see cref="M:SafeOrbit.Memory.Injection.InjectionDetector.NotifyChanges(System.Object)" />, it saves the information related to the object.
                </p>
                <p>You can call <see cref="M:SafeOrbit.Memory.Injection.InjectionDetector.AlertUnnotifiedChanges(System.Object)" /> to throw if the objects last saved state has been changed.</p>
            </summary>
            <seealso cref="T:SafeOrbit.Memory.IInjectionDetector" />
            <seealso cref="T:System.IDisposable" />
            <seealso cref="T:SafeOrbit.Memory.ISafeObject`1" />
        </member>
        <member name="M:SafeOrbit.Memory.Injection.InjectionDetector.#ctor(System.Boolean,System.Boolean,SafeOrbit.Memory.InjectionServices.InjectionAlertChannel)">
            <summary>
                Initializes a new instance of the <see cref="T:SafeOrbit.Memory.Injection.InjectionDetector" /> class.
            </summary>
            <param name="scanCode">if set to <c>true</c> it'll scan and validate the code.</param>
            <param name="scanState">if set to <c>true</c>  it'll scan and validate the state.</param>
            <param name="alertChannel">The alert channel.</param>
            <seealso cref="P:SafeOrbit.Memory.Injection.InjectionDetector.ScanCode" />
            <seealso cref="P:SafeOrbit.Memory.Injection.InjectionDetector.ScanState" />
        </member>
        <member name="M:SafeOrbit.Memory.Injection.InjectionDetector.#ctor(SafeOrbit.Memory.InjectionServices.IInjectionAlerter,SafeOrbit.Infrastructure.Reflection.ITypeIdGenerator,SafeOrbit.Memory.InjectionServices.Stampers.IStamper{System.Object},SafeOrbit.Memory.InjectionServices.Stampers.IStamper{System.Type},System.Boolean,System.Boolean,SafeOrbit.Memory.InjectionServices.InjectionAlertChannel)">
            <summary>
                Internal constructor with all dependencies.
            </summary>
        </member>
        <member name="P:SafeOrbit.Memory.Injection.InjectionDetector.ScanState">
            <summary>
                Gets or sets a value indicating whether <see cref="T:SafeOrbit.Memory.Injection.InjectionDetector" /> will keep track of the
                state of the object.
            </summary>
        </member>
        <member name="P:SafeOrbit.Memory.Injection.InjectionDetector.ScanCode">
            <summary>
                Gets or sets a value indicating whether <see cref="T:SafeOrbit.Memory.Injection.InjectionDetector" /> will keep track of the
                code of the object.
            </summary>
        </member>
        <member name="M:SafeOrbit.Memory.Injection.InjectionDetector.NotifyChanges(System.Object)">
            <inheritdoc />
            <summary>
                Saves the state and/or the code  of the object.
                Use <see cref="M:SafeOrbit.Memory.Injection.InjectionDetector.AlertUnnotifiedChanges(System.Object)" /> method to check if the state has been injected.
            </summary>
            <param name="object">Object that this instance scans/tracks.</param>
        </member>
        <member name="M:SafeOrbit.Memory.Injection.InjectionDetector.AlertUnnotifiedChanges(System.Object)">
            <inheritdoc />
            <summary>
                Alerts when any unnotified changes are detected any <see cref="P:SafeOrbit.Memory.Injection.InjectionDetector.CanAlert" /> is true.
            </summary>
            <param name="object">Object that this instance has been notified by <see cref="M:SafeOrbit.Memory.Injection.InjectionDetector.NotifyChanges(System.Object)" /></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="object" /> is <see langword="NULL" /></exception>
            <seealso cref="T:SafeOrbit.Memory.InjectionServices.IAlerts" />
        </member>
        <member name="M:SafeOrbit.Memory.Injection.InjectionDetector.GetLastCodeStampFor(System.Type)">
            <exception cref="T:System.ArgumentException">
                Please validate the object using <see cref="M:SafeOrbit.Memory.Injection.InjectionDetector.NotifyChanges(System.Object)" /> method before
                requesting a code stamp.
            </exception>
        </member>
        <member name="P:SafeOrbit.Memory.Injection.InjectionDetector.AlertChannel">
            <inheritdoc />
            <summary>
                Gets or sets the alert channel.
            </summary>
            <seealso cref="T:SafeOrbit.Memory.InjectionServices.IAlerts" />
            <seealso cref="T:SafeOrbit.Memory.IInjectionDetector" />
            <seealso cref="P:SafeOrbit.Memory.Injection.InjectionDetector.CanAlert" />
            <value>The alert channel.</value>
        </member>
        <member name="P:SafeOrbit.Memory.Injection.InjectionDetector.CanAlert">
            <inheritdoc />
            <summary>
                Returns whether this <see cref="T:SafeOrbit.Memory.Injection.InjectionDetector" /> instance tracks objects (see: <see cref="P:SafeOrbit.Memory.Injection.InjectionDetector.ScanCode" />,
                <see cref="P:SafeOrbit.Memory.Injection.InjectionDetector.ScanState" />)
            </summary>
            <seealso cref="T:SafeOrbit.Memory.InjectionServices.IAlerts" />
            <seealso cref="T:SafeOrbit.Memory.IInjectionDetector" />
            <seealso cref="P:SafeOrbit.Memory.Injection.InjectionDetector.AlertChannel" />
            <value>If this instance is allowed to alert.</value>
        </member>
        <member name="T:SafeOrbit.Memory.IInjectionDetector">
            <summary>
                <see cref="T:SafeOrbit.Memory.IInjectionDetector" /> abstracts a service that keeps track of C# objects and classes. It alert .
            </summary>
            <seealso cref="M:SafeOrbit.Memory.IInjectionDetector.AlertUnnotifiedChanges(System.Object)"/>
            <seealso cref="T:SafeOrbit.Memory.InjectionServices.IAlerts"/>
            <remarks>
                <p>The work-method is simple :</p>
                <p>1. User validates last changes made by application using <see cref="M:SafeOrbit.Memory.IInjectionDetector.NotifyChanges(System.Object)" /> methods.</p>
                <p>
                    2. The class throws <see cref="T:SafeOrbit.Exceptions.MemoryInjectionException" /> on <see cref="M:SafeOrbit.Memory.IInjectionDetector.AlertUnnotifiedChanges(System.Object)" /> if the object has
                    been changed without validating.
                </p>
            </remarks>
            <seealso cref="T:SafeOrbit.Exceptions.MemoryInjectionException" />
            <seealso cref="T:SafeOrbit.Memory.Injection.InjectionDetector" />
            <seealso cref="T:SafeOrbit.Memory.InjectionServices.IAlerts" />
        </member>
        <member name="M:SafeOrbit.Memory.IInjectionDetector.AlertUnnotifiedChanges(System.Object)">
            <summary>
                Validates object depending on <see cref="P:SafeOrbit.Memory.IInjectionDetector.ScanState" /> and <see cref="P:SafeOrbit.Memory.IInjectionDetector.ScanCode" />.
            </summary>
            <remarks>
                <p>The object must be validated by application using <see cref="M:SafeOrbit.Memory.IInjectionDetector.NotifyChanges(System.Object)" /> before calling this method.</p>
            </remarks>
            <param name="object">Object that this instance has been notified by <see cref="M:SafeOrbit.Memory.IInjectionDetector.NotifyChanges(System.Object)"/></param>
            <exception cref="T:SafeOrbit.Exceptions.MemoryInjectionException">
                If the state or code of the object has been changed without
                <see cref="M:SafeOrbit.Memory.IInjectionDetector.NotifyChanges(System.Object)" /> method being called.
            </exception>
        </member>
        <member name="M:SafeOrbit.Memory.IInjectionDetector.NotifyChanges(System.Object)">
            <summary>
            Verifies the latest changes to the object.
            </summary>
            <param name="object">Object that this instance scans/tracks.</param>
        </member>
        <member name="F:SafeOrbit.Memory.InjectionType.CodeInjection">
            <summary>
                Reprents injection when the code of the application is injected.
            </summary>
        </member>
        <member name="F:SafeOrbit.Memory.InjectionType.VariableInjection">
            <summary>
                Represents injection when stored values in the memory are injected.
            </summary>
        </member>
        <member name="F:SafeOrbit.Memory.InjectionType.CodeAndVariableInjection">
            <summary>
                Represents injection of the both <see cref="F:SafeOrbit.Memory.InjectionType.CodeInjection" /> and <see cref="F:SafeOrbit.Memory.InjectionType.VariableInjection" />
            </summary>
        </member>
        <member name="P:SafeOrbit.Memory.SafeBytes.Length">
            <summary>
                Returns to real length of the bytes inside
            </summary>
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytes.Append(System.Byte)">
            <summary>
                Adds the byte, and one random byte after it to avoid memory leaking
            </summary>
            <exception cref="T:System.ObjectDisposedException">Throws if the SafeBytes instance is disposed</exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytes.Append(SafeOrbit.Memory.ISafeBytes)">
            <summary>
                Clones and appends the each byte from given SafeBytes object to the end.
            </summary>
            <exception cref="T:System.ArgumentNullException">Throws if the argument is null</exception>
            <exception cref="T:System.ObjectDisposedException">Throws if the SafeBytes instance is disposed</exception>
            <exception cref="T:System.ArgumentException">Throws if the argument is empty</exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytes.GetByte(System.Int32)">
            <summary>
                Gets the byte in the safe list
            </summary>
            <param name="position">Index of the byte</param>
            <returns>Byte from the array</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Throws if the position is lower than 0 or greater than/equals to the
                length
            </exception>
            <exception cref="T:System.ObjectDisposedException">Throws if the SafeBytes instance is disposed</exception>
            <exception cref="T:System.InvalidOperationException">Throws if the SafeBytes instance is empty.</exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytes.ToByteArray">
            <exception cref="T:System.ObjectDisposedException">Throws if the SafeBytes instance is disposed</exception>
            <exception cref="T:System.InvalidOperationException">Throws if the SafeBytes instance is empty.</exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytes.DeepClone">
            <exception cref="T:System.ObjectDisposedException">Throws if the SafeBytes instance is disposed</exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytes.IsNullOrEmpty(SafeOrbit.Memory.ISafeBytes)">
            <summary>
                Indicates whether the specified SafeBytes object is null or holds zero bytes.
            </summary>
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytes.Append(SafeOrbit.Memory.SafeBytesServices.ISafeByte)">
            <exception cref="T:System.ArgumentNullException"><paramref name="safeByte" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytes.EnsureNotDisposed">
            <exception cref="T:System.ObjectDisposedException">Throws if the SafeBytes instance is disposed</exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytes.EnsureNotEmpty">
            <exception cref="T:System.InvalidOperationException">Throws if the SafeBytes instance is empty.</exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytesServices.Collection.ByteIdListSerializer.SerializeAsync(System.Collections.Generic.IReadOnlyCollection{System.Int32})">
            <summary>
            Serializes list of id's in list of 32 bit unsigned integers. The first value is the length of the array.
            </summary>
        </member>
        <member name="T:SafeOrbit.Memory.SafeBytesServices.Collection.EncryptedSafeByteCollection">
            <summary>
                An encrypted collection of <see cref="T:SafeOrbit.Memory.SafeBytesServices.ISafeByte" /> instances.
            </summary>
            <seealso cref="T:SafeOrbit.Memory.SafeBytesServices.ISafeByte" />
        </member>
        <member name="F:SafeOrbit.Memory.SafeBytesServices.Collection.EncryptedSafeByteCollection._encryptionKey">
            <summary>
                The encryption key to encrypt/decrypt the inner list.
            </summary>
        </member>
        <member name="F:SafeOrbit.Memory.SafeBytesServices.Collection.EncryptedSafeByteCollection._encryptedCollection">
            <summary>
                Encrypted inner collection.
            </summary>
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytesServices.Collection.EncryptedSafeByteCollection.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SafeOrbit.Memory.SafeBytesServices.Collection.EncryptedSafeByteCollection" /> class.
            </summary>
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytesServices.Collection.EncryptedSafeByteCollection.Append(SafeOrbit.Memory.SafeBytesServices.ISafeByte)">
            <summary>
                Appends the specified <see cref="T:SafeOrbit.Memory.SafeBytesServices.ISafeByte" /> instance to the inner encrypted collection.
            </summary>
            <param name="safeByte">The safe byte.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="safeByte" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ObjectDisposedException">Throws if the <see cref="T:SafeOrbit.Memory.SafeBytesServices.Collection.EncryptedSafeByteCollection" /> instance is disposed</exception>
            <seealso cref="T:SafeOrbit.Memory.SafeBytesServices.ISafeByte" />
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytesServices.Collection.EncryptedSafeByteCollection.GetAsync(System.Int32)">
            <inheritdoc />
            <summary>
                Gets the byte as <see cref="T:SafeOrbit.Memory.SafeBytesServices.ISafeByte" /> for the specified index asynchronously.
            </summary>
            <param name="index">The position of the byte.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index" /> is lower than zero or higher/equals to the
                <see cref="P:SafeOrbit.Memory.SafeBytesServices.Collection.EncryptedSafeByteCollection.Length" />.
            </exception>
            <exception cref="T:System.InvalidOperationException"><see cref="T:SafeOrbit.Memory.SafeBytesServices.Collection.EncryptedSafeByteCollection" /> instance is empty.</exception>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:SafeOrbit.Memory.SafeBytesServices.Collection.EncryptedSafeByteCollection" /> instance is disposed</exception>
            <seealso cref="M:SafeOrbit.Memory.SafeBytesServices.Collection.EncryptedSafeByteCollection.Get(System.Int32)" />
            <seealso cref="T:SafeOrbit.Memory.SafeBytesServices.ISafeByte" />
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytesServices.Collection.EncryptedSafeByteCollection.ToDecryptedBytes">
            <summary>
                Returns all of the real byte values that <see cref="T:SafeOrbit.Memory.SafeBytesServices.Collection.ISafeByteCollection" /> holds.
                Reveals all protected data in memory.
            </summary>
            <returns>System.Byte[].</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="T:SafeOrbit.Memory.SafeBytesServices.Collection.EncryptedSafeByteCollection" /> instance is empty.</exception>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:SafeOrbit.Memory.SafeBytesServices.Collection.EncryptedSafeByteCollection" /> instance is disposed</exception>
        </member>
        <member name="P:SafeOrbit.Memory.SafeBytesServices.Collection.EncryptedSafeByteCollection.Length">
            <summary>
                Gets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytesServices.Collection.EncryptedSafeByteCollection.Dispose">
            <inheritdoc />
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytesServices.Collection.EncryptedSafeByteCollection.EnsureNotDisposed">
            <exception cref="T:System.ObjectDisposedException">Throws if the <see cref="T:SafeOrbit.Memory.SafeBytesServices.Collection.EncryptedSafeByteCollection" /> instance is disposed</exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytesServices.Collection.EncryptedSafeByteCollection.EnsureNotEmpty">
            <exception cref="T:System.InvalidOperationException">Throws if the <see cref="T:SafeOrbit.Memory.SafeBytesServices.Collection.EncryptedSafeByteCollection" /> instance is empty.</exception>
        </member>
        <member name="T:SafeOrbit.Memory.SafeBytesServices.Collection.ISafeByteCollection">
            <inheritdoc />
            <summary>
                Abstraction of a collection for <see cref="T:SafeOrbit.Memory.SafeBytesServices.ISafeByte" /> instances.
            </summary>
            <seealso cref="T:SafeOrbit.Memory.SafeBytesServices.ISafeByte" />
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytesServices.Collection.ISafeByteCollection.GetAsync(System.Int32)">
            <summary>
                Gets the byte as <see cref="T:SafeOrbit.Memory.SafeBytesServices.ISafeByte" /> for the specified index asynchronously.
            </summary>
            <param name="index">The position of the byte.</param>
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytesServices.Collection.ISafeByteCollection.ToDecryptedBytes">
            <summary>
            Returns all of the real byte values that <see cref="T:SafeOrbit.Memory.SafeBytesServices.Collection.ISafeByteCollection"/> holds.
            CAUTION: Reveals all protected data in memory. Use with <see cref="T:SafeOrbit.Memory.SafeMemoryStream"/>.
            </summary>
        </member>
        <member name="T:SafeOrbit.Memory.SafeBytesServices.DataProtection.IByteArrayProtector">
            <summary>
                Encrypts and decrypts a <see cref="T:System.Byte" /> array.
            </summary>
        </member>
        <member name="P:SafeOrbit.Memory.SafeBytesServices.DataProtection.IByteArrayProtector.BlockSizeInBytes">
            <summary>
            Gets the size of the blocks for encryption to function.
            </summary>
            <value>The size of the blocks.</value>
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytesServices.DataProtection.IByteArrayProtector.Protect(System.Byte[])">
            <summary>
            Encrypts the specified user data.
            </summary>
            <param name="userData">The data to encrypt.</param>
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytesServices.DataProtection.IByteArrayProtector.Unprotect(System.Byte[])">
            <summary>
            Decrypts the specified encrypted data.
            </summary>
            <param name="encryptedData">The encrypted data to decrypt.</param>
        </member>
        <member name="T:SafeOrbit.Memory.SafeBytesServices.DataProtection.MemoryProtector">
            <inheritdoc />
            <summary>
                Encrypts/decrypt a byte array using <see cref="T:SafeOrbit.Cryptography.Encryption.BlowfishEcb" />.
            </summary>
            <seealso cref="T:SafeOrbit.Memory.SafeBytesServices.DataProtection.IByteArrayProtector" />
            <summary>
                .NET Core implementation of <see cref="T:SafeOrbit.Memory.SafeBytesServices.DataProtection.IByteArrayProtector" />.
            </summary>
            <seealso cref="T:SafeOrbit.Memory.SafeBytesServices.DataProtection.IByteArrayProtector" />
        </member>
        <member name="T:SafeOrbit.Memory.SafeBytesServices.Factory.ISafeByteFactory">
            <summary>
                Abstracts a factory that returns the right <see cref="T:SafeOrbit.Memory.SafeBytesServices.ISafeByte" /> instance for any <see cref="T:System.Byte" /> or
                <see cref="P:SafeOrbit.Memory.SafeBytesServices.ISafeByte.Id" />.
            </summary>
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytesServices.Factory.ISafeByteFactory.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytesServices.Factory.ISafeByteFactory.GetByByte(System.Byte)">
            <summary>
            Returns the <see cref="T:SafeOrbit.Memory.SafeBytesServices.ISafeByte"/> for the specified <see cref="T:System.Byte"/>.
            </summary>
            <param name="byte">The byte.</param>
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytesServices.Factory.ISafeByteFactory.GetById(System.Int32)">
            <summary>
            Returns the <see cref="T:SafeOrbit.Memory.SafeBytesServices.ISafeByte"/> for the specified <see cref="P:SafeOrbit.Memory.SafeBytesServices.ISafeByte.Id"/>.
            </summary>
            <param name="safeByteId">The safe byte identifier.</param>
            <seealso cref="T:SafeOrbit.Memory.SafeBytesServices.Id.IByteIdGenerator"/>
        </member>
        <member name="T:SafeOrbit.Memory.SafeBytesServices.Factory.MemoryCachedSafeByteFactory">
            <summary>
                Memory cached provider for <see cref="T:SafeOrbit.Memory.SafeBytesServices.ISafeByte" />.
                It saves the <see cref="P:SafeOrbit.Memory.SafeBytesServices.ISafeByte.Id" /> of in the memory as keys for fast and hashed access.
            </summary>
            <seealso cref="T:SafeOrbit.Memory.SafeBytesServices.Factory.ISafeByteFactory" />
            <seealso cref="T:SafeOrbit.Memory.SafeBytesServices.ISafeByte" />
            <seealso cref="T:SafeOrbit.Memory.SafeBytesServices.Id.IByteIdGenerator" />
        </member>
        <member name="F:SafeOrbit.Memory.SafeBytesServices.Factory.MemoryCachedSafeByteFactory._isCached">
            <summary>
                Returns if the factory instances are cached in the memory.
            </summary>
            <seealso cref="F:SafeOrbit.Memory.SafeBytesServices.Factory.MemoryCachedSafeByteFactory._safeBytesDictionary" />
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytesServices.Factory.MemoryCachedSafeByteFactory.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SafeOrbit.Memory.SafeBytesServices.Factory.MemoryCachedSafeByteFactory" /> class.
            </summary>
        </member>
        <member name="P:SafeOrbit.Memory.SafeBytesServices.Factory.MemoryCachedSafeByteFactory.InnerDictionaryProtectionMode">
            <summary>
                Gets the <see cref="T:SafeOrbit.Memory.SafeObjectProtectionMode" /> for dictionary protection mode.
            </summary>
            <value>The dictionary protection mode.</value>
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytesServices.Factory.MemoryCachedSafeByteFactory.Initialize">
            <inheritdoc />
            <summary>
                Initializes the service by caching all instances in the memory.
            </summary>
            <remarks>
            Virtual for testing testing purposes.
            </remarks>
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytesServices.Factory.MemoryCachedSafeByteFactory.GetByByte(System.Byte)">
            <summary>
            Returns the cached <see cref="T:SafeOrbit.Memory.SafeBytesServices.ISafeByte" /> for the specified <see cref="T:System.Byte" />.
            </summary>
            <param name="byte">The byte.</param>
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytesServices.Factory.MemoryCachedSafeByteFactory.GetById(System.Int32)">
            <summary>
            Returns cached the <see cref="T:SafeOrbit.Memory.SafeBytesServices.ISafeByte" /> for the specified <see cref="P:SafeOrbit.Memory.SafeBytesServices.ISafeByte.Id" />.
            </summary>
            <param name="safeByteId">The safe byte identifier.</param>
            <seealso cref="T:SafeOrbit.Memory.SafeBytesServices.Id.IByteIdGenerator" />
        </member>
        <member name="T:SafeOrbit.Memory.SafeBytesServices.Id.HashedByteIdGenerator">
            <summary>
                Creates a unique <see cref="T:System.Int32" /> values for each <see cref="T:System.Byte" />.
                The class is stateless but session-based. <see cref="P:SafeOrbit.Memory.SafeBytesServices.Id.HashedByteIdGenerator.SessionSalt" /> is different values each time the application
                is loaded.
            </summary>
            <seealso cref="P:SafeOrbit.Memory.SafeBytesServices.Id.HashedByteIdGenerator.SessionSalt" />
            <seealso cref="T:SafeOrbit.Memory.SafeBytesServices.Id.IByteIdGenerator" />
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytesServices.Id.HashedByteIdGenerator.#ctor">
            <exception cref="T:SafeOrbit.Exceptions.MemoryInjectionException">The object has been injected.</exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytesServices.Id.HashedByteIdGenerator.ClearSessionSalt">
            <summary>
                Clears the session salt. A new session salt will created lazily upon request. Please keep in my that requesting
                a new session salt will break all of the SafeOrbit instances and should never be used at all.
            </summary>
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytesServices.Id.HashedByteIdGenerator.GenerateSessionSalt">
            <summary>
                Recursive method that generates and returns a validated session salt.
            </summary>
            <seealso cref="M:SafeOrbit.Memory.SafeBytesServices.Id.HashedByteIdGenerator.IsSaltValid(System.Byte[])" />
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytesServices.Id.HashedByteIdGenerator.IsSaltValid(System.Byte[])">
            <summary>
                Determines if all byte id's will have different result with the given salt.
            </summary>
        </member>
        <member name="T:SafeOrbit.Memory.SafeBytesServices.Id.IByteIdGenerator">
            <summary>
                An abstraction for a class that provides unique values for each byte.
            </summary>
            <seealso cref="T:SafeOrbit.Memory.SafeBytesServices.Id.IByteIdGenerator" />
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytesServices.Id.IByteIdGenerator.Generate(System.Byte)">
            <summary>
                Generates a unique id for <see cref="T:System.Byte" /> values.
            </summary>
            <param name="byte">The value that'll get a unique <see cref="T:System.Int32" /> value.</param>
            <returns>A <see cref="T:System.Int32" /> value that's unique for the <paramref name="byte" /> parameter.</returns>
        </member>
        <member name="T:SafeOrbit.Memory.SafeBytesServices.SafeByte">
            <summary>
                <see cref="T:SafeOrbit.Memory.SafeBytesServices.SafeByte" /> represents a single cryptographically secured byte in the memory.
                It's the lowest level memory protection algorithm.
            </summary>
            <seealso cref="T:SafeOrbit.Memory.SafeBytesServices.ISafeByte" />
            <seealso cref="T:SafeOrbit.Memory.ISafeBytes" />
            <seealso cref="T:SafeOrbit.Memory.SafeBytesServices.Factory.ISafeByteFactory" />
            <seealso cref="T:SafeOrbit.Memory.SafeBytesServices.Factory.MemoryCachedSafeByteFactory" />
        </member>
        <member name="F:SafeOrbit.Memory.SafeBytesServices.SafeByte.KeySize">
            <summary>
                The encryption key size.
            </summary>
        </member>
        <member name="F:SafeOrbit.Memory.SafeBytesServices.SafeByte.SaltSize">
            <summary>
                The size of the salt for the encryption.
            </summary>
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytesServices.SafeByte.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SafeOrbit.Memory.SafeBytesServices.SafeByte" /> class.
            </summary>
            <exception cref="T:SafeOrbit.Exceptions.MemoryInjectionException">If the object has been modified outside of the application scope.</exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytesServices.SafeByte.#ctor(System.Int32,System.Int32,System.Int32,System.Byte[],System.Byte[],SafeOrbit.Cryptography.Encryption.IFastEncryptor,SafeOrbit.Cryptography.Random.IFastRandom,SafeOrbit.Memory.SafeBytesServices.Id.IByteIdGenerator,SafeOrbit.Memory.SafeBytesServices.DataProtection.IByteArrayProtector)">
            <summary>
                Private constructor for creating identical instance of the <see cref="T:SafeOrbit.Memory.SafeBytesServices.SafeByte" />.
            </summary>
        </member>
        <member name="P:SafeOrbit.Memory.SafeBytesServices.SafeByte.Id">
            <exception cref="T:System.InvalidOperationException" accessor="get">Thrown when byte is already set</exception>
        </member>
        <member name="P:SafeOrbit.Memory.SafeBytesServices.SafeByte.IsByteSet">
            <summary>
                Gets a value indicating whether any byte is set on this instance.
            </summary>
            <value>
                <c>true</c> if the byte is set; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytesServices.SafeByte.Set(System.Byte)">
            <exception cref="T:System.InvalidOperationException">Thrown when byte is already set</exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytesServices.SafeByte.Get">
            <summary>
                Decrypts and returns the byte that this <see cref="T:SafeOrbit.Memory.SafeBytesServices.SafeByte" /> instance represents.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Thrown when byte is not set</exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytesServices.SafeByte.DeepClone">
            <summary>
                Deeply clone the object.
            </summary>
            <returns>
                Cloned object.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown when byte is not set</exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytesServices.SafeByte.Dispose">
            <summary>
                Frees the encryption resources.
            </summary>
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytesServices.SafeByte.GetMemoryProtectableSizedBytes(System.Byte[])">
            <summary>
                User data must be multiple of 16 in order to be used in ProtectedMemory.Protect
            </summary>
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytesServices.SafeByte.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                Unique hash code based on the byte it is holding, suitable for use in hashing algorithms and data structures like a
                hash table.
            </returns>
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytesServices.SafeByte.EnsureByteIsSet">
            <exception cref="T:System.InvalidOperationException">Thrown when byte is not set</exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeBytesServices.SafeByte.EnsureByteIsNotSet">
            <exception cref="T:System.InvalidOperationException">Thrown when byte is already set</exception>
        </member>
        <member name="T:SafeOrbit.Memory.InstanceProtectionMode">
            <summary>
                Different protection modes for a <see cref="T:SafeOrbit.Memory.ISafeObject`1" />
            </summary>
            <seealso cref="T:SafeOrbit.Memory.ISafeObject`1" />
        </member>
        <member name="F:SafeOrbit.Memory.InstanceProtectionMode.StateAndCode">
            <summary>
                Provides the maximum security by protecting the instance against both state and code injections
            </summary>
        </member>
        <member name="F:SafeOrbit.Memory.InstanceProtectionMode.JustState">
            <summary>
                Provides protection against only state injections. This option should be selected if the code of the the instance
                is designed to change its code dynamically. The type will be vulnerable to code injections.
            </summary>
        </member>
        <member name="F:SafeOrbit.Memory.InstanceProtectionMode.JustCode">
            <summary>
                Provides protection against only code injections. This option might be good if the instance type is a stateless
                class, or the data it's holding is not sensitive.
            </summary>
        </member>
        <member name="F:SafeOrbit.Memory.InstanceProtectionMode.NoProtection">
            <summary>
                Provides no protection / security.
            </summary>
        </member>
        <member name="T:SafeOrbit.Memory.SafeContainerServices.Instance.Providers.CustomInstanceProvider`1">
            <summary>
                Provides an instance from a custom <see cref="T:System.Func`1" />
            </summary>
            <seealso cref="T:SafeOrbit.Memory.SafeContainerServices.Instance.Providers.SingletonInstanceProvider`1"/>
            <seealso cref="T:SafeOrbit.Memory.SafeContainerServices.Instance.Providers.TransientInstanceProvider`1"/>
            <seealso cref="T:SafeOrbit.Memory.SafeContainerServices.Instance.IInstanceProvider"/>
            <seealso cref="T:SafeOrbit.Memory.SafeContainerServices.Instance.Providers.SafeInstanceProviderBase`1"/>
        </member>
        <member name="M:SafeOrbit.Memory.SafeContainerServices.Instance.Providers.CustomInstanceProvider`1.#ctor(System.Func{`0},SafeOrbit.Memory.IInjectionDetector,SafeOrbit.Memory.InstanceProtectionMode,SafeOrbit.Memory.InjectionServices.InjectionAlertChannel,SafeOrbit.Memory.LifeTime)">
            <summary>
                Internal constructor with all dependencies.
            </summary>
        </member>
        <member name="M:SafeOrbit.Memory.SafeContainerServices.Instance.Providers.CustomInstanceProvider`1.GetInstance">
            <summary>
            Returns a service object given the specified instance.
            </summary>
            <returns>TInstanceType.</returns>
        </member>
        <member name="T:SafeOrbit.Memory.SafeContainerServices.Instance.Providers.IInstanceProviderFactory">
            <summary>
                An abstraction for a factory class to retrieve right <seealso cref="T:SafeOrbit.Memory.SafeContainerServices.Instance.IInstanceProvider" /> instance for right
                <see cref="T:SafeOrbit.Memory.LifeTime" /> and <see cref="T:SafeOrbit.Memory.SafeContainerProtectionMode" />.
            </summary>
            <seealso cref="T:SafeOrbit.Memory.SafeContainerServices.Instance.IInstanceProvider" />
            <seealso cref="T:SafeOrbit.Memory.LifeTime" />
            <seealso cref="T:SafeOrbit.Memory.SafeContainerProtectionMode" />
        </member>
        <member name="M:SafeOrbit.Memory.SafeContainerServices.Instance.Providers.IInstanceProviderFactory.Get``1(SafeOrbit.Memory.LifeTime,SafeOrbit.Memory.InstanceProtectionMode,SafeOrbit.Memory.InjectionServices.InjectionAlertChannel)">
            <summary>
                Provides an <see cref="T:SafeOrbit.Memory.SafeContainerServices.Instance.IInstanceProvider" /> for the specified <see cref="T:SafeOrbit.Memory.LifeTime" />
            </summary>
            <remarks>
                <p>
                    Only accepted <see cref="T:SafeOrbit.Memory.LifeTime" />'s are <see cref="F:SafeOrbit.Memory.LifeTime.Transient" /> and
                    <see cref="F:SafeOrbit.Memory.LifeTime.Singleton" />.
                </p>
            </remarks>
            <typeparam name="TImplementation">Type of the requested instance.</typeparam>
            <param name="lifeTime">The life time.</param>
            <param name="protectionMode">Initial protection mode for the result instance.</param>
            <param name="alertChannel">Initial alert channel for the result instance.</param>
            <returns>A <see cref="T:SafeOrbit.Memory.SafeContainerServices.Instance.IInstanceProvider" />.</returns>
            <seealso cref="T:SafeOrbit.Memory.SafeContainerServices.Instance.IInstanceProvider" />
            <seealso cref="T:SafeOrbit.Memory.InstanceProtectionMode" />
            <seealso cref="T:SafeOrbit.Memory.InjectionServices.InjectionAlertChannel" />
            <seealso cref="T:SafeOrbit.Memory.LifeTime" />
        </member>
        <member name="M:SafeOrbit.Memory.SafeContainerServices.Instance.Providers.IInstanceProviderFactory.Get``1(System.Func{``0},SafeOrbit.Memory.InstanceProtectionMode,SafeOrbit.Memory.InjectionServices.InjectionAlertChannel,SafeOrbit.Memory.LifeTime)">
            <summary>
                Provides an <see cref="T:SafeOrbit.Memory.SafeContainerServices.Instance.IInstanceProvider" /> with a specified instance getter function.
            </summary>
        </member>
        <member name="T:SafeOrbit.Memory.SafeContainerServices.Instance.Providers.InstanceProviderFactory">
            <summary>
            Returns the right
            </summary>
            <seealso cref="T:SafeOrbit.Memory.SafeContainerServices.Instance.Providers.IInstanceProviderFactory" />
        </member>
        <member name="T:SafeOrbit.Memory.SafeContainerServices.Instance.Providers.SingletonInstanceProvider`1">
            <summary>
                Provides the same instance of <typeparamref name="TImplementation" />.
            </summary>
            <see cref="F:SafeOrbit.Memory.LifeTime.Singleton"/>
            <seealso cref="T:SafeOrbit.Memory.SafeContainerServices.Instance.Providers.TransientInstanceProvider`1"/>
            <seealso cref="T:SafeOrbit.Memory.SafeContainerServices.Instance.Providers.CustomInstanceProvider`1"/>
            <seealso cref="T:SafeOrbit.Memory.SafeContainerServices.Instance.IInstanceProvider"/>
            <seealso cref="T:SafeOrbit.Memory.SafeContainerServices.Instance.Providers.SafeInstanceProviderBase`1"/>
        </member>
        <member name="M:SafeOrbit.Memory.SafeContainerServices.Instance.Providers.SingletonInstanceProvider`1.#ctor(SafeOrbit.Memory.IInjectionDetector,SafeOrbit.Memory.InstanceProtectionMode,SafeOrbit.Memory.InjectionServices.InjectionAlertChannel)">
            <summary>
                Internal constructor with all dependencies.
            </summary>
        </member>
        <member name="T:SafeOrbit.Memory.SafeContainerServices.Instance.Providers.TransientInstanceProvider`1">
            <summary>
                Provides a new instance of <typeparamref name="TImplementation" /> every time.
            </summary>
            <seealso cref="F:SafeOrbit.Memory.LifeTime.Transient" />
            <seealso cref="T:SafeOrbit.Memory.SafeContainerServices.Instance.Providers.SingletonInstanceProvider`1" />
            <seealso cref="T:SafeOrbit.Memory.SafeContainerServices.Instance.Providers.CustomInstanceProvider`1" />
            <seealso cref="T:SafeOrbit.Memory.SafeContainerServices.Instance.IInstanceProvider" />
            <seealso cref="T:SafeOrbit.Memory.SafeContainerServices.Instance.Providers.SafeInstanceProviderBase`1" />
        </member>
        <member name="M:SafeOrbit.Memory.SafeContainerServices.Instance.Providers.TransientInstanceProvider`1.#ctor(SafeOrbit.Memory.IInjectionDetector,SafeOrbit.Memory.InstanceProtectionMode,SafeOrbit.Memory.InjectionServices.InjectionAlertChannel)">
            <summary>
                Internal constructor with all dependencies.
            </summary>
        </member>
        <member name="T:SafeOrbit.Memory.SafeContainerServices.Instance.Providers.SafeInstanceProviderBase`1">
            <summary>
                Provides helper methods and base protection for <see cref="T:SafeOrbit.Memory.SafeContainerServices.Instance.IInstanceProvider" />'s.
            </summary>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <seealso cref="T:SafeOrbit.Memory.InstanceProtectionMode" />
            <seealso cref="T:SafeOrbit.Memory.SafeContainerServices.Instance.IInstanceProvider" />
            <seealso cref="T:SafeOrbit.Memory.IInjectionDetector" />
            <seealso cref="T:SafeOrbit.Infrastructure.Protectable.IProtectable`1" />
            <seealso cref="T:SafeOrbit.Infrastructure.Protectable.ProtectableBase`1" />
        </member>
        <member name="P:SafeOrbit.Memory.SafeContainerServices.Instance.Providers.SafeInstanceProviderBase`1.CanProtectState">
            <summary>
            Determines whether this instance provider's instance is allowed be protected against state injections. Default: <c>TRUE</c>
            </summary>
            <seealso cref="P:SafeOrbit.Memory.IInjectionDetector.ScanState"/>
            <seealso cref="M:SafeOrbit.Memory.SafeContainerServices.Instance.Providers.SafeInstanceProviderBase`1.Provide"/>
        </member>
        <member name="T:SafeOrbit.Memory.SafeContainerServices.Instance.Validation.IInstanceValidator">
            <summary>
            Abstracts a service that validates a <see cref="T:System.Collections.Generic.IReadOnlyList`1"/>
            </summary>
            <seealso cref="T:SafeOrbit.Memory.SafeContainerServices.Instance.IInstanceProvider"/>
        </member>
        <member name="F:SafeOrbit.Memory.SafeContainerServices.Instance.Validation.RuleType.Warning">
            <summary>
            If the rule is not satisfied the factory can continue.
            </summary>
        </member>
        <member name="F:SafeOrbit.Memory.SafeContainerServices.Instance.Validation.RuleType.Error">
            <summary>
            If the rules is not satisfied then the factory should throw.
            </summary>
        </member>
        <member name="M:SafeOrbit.Memory.SafeContainerServices.Instance.Validation.SingletonShouldNotDependOnTransientRule.#ctor(System.Collections.Generic.IEnumerable{SafeOrbit.Memory.SafeContainerServices.Instance.IInstanceProvider})">
            <param name="registeredInstanceProviders">List of all of the registered instance providers.</param>
        </member>
        <member name="T:SafeOrbit.Memory.ISafeContainer">
            <summary>
                <p>Abstraction for a factory class that's protected in memory.</p>
                <p>It abstracts strategies for different protection modes</p>
            </summary>
            <seealso cref="T:SafeOrbit.Memory.SafeContainerProtectionMode" />
            <seealso cref="T:SafeOrbit.Memory.SafeContainerProtectionMode" />
        </member>
        <member name="M:SafeOrbit.Memory.ISafeContainer.Register``2(SafeOrbit.Memory.LifeTime)">
            <summary>
                Registers the specified life time.
            </summary>
            <typeparam name="TComponent">The type of the the component.</typeparam>
            <typeparam name="TImplementation">The type of the t implementation.</typeparam>
            <param name="lifeTime">The life time.</param>
        </member>
        <member name="M:SafeOrbit.Memory.ISafeContainer.Register``2(System.Func{``1},SafeOrbit.Memory.LifeTime)">
            <summary>
                Registers the specified instance initializer with an implementation.
            </summary>
            <typeparam name="TComponent">The type of the the component.</typeparam>
            <typeparam name="TImplementation">The type of the t implementation.</typeparam>
            <param name="instanceInitializer">The instance initializer.</param>
            <param name="lifeTime">The life time.</param>
        </member>
        <member name="M:SafeOrbit.Memory.ISafeContainer.Register``1(System.Func{``0},SafeOrbit.Memory.LifeTime)">
            <summary>
            Registers the specified instance initializer.
            </summary>
            <typeparam name="TComponent">The type of the the component.</typeparam>
            <param name="instanceInitializer">The instance initializer.</param>
            <param name="lifeTime">The life time.</param>
        </member>
        <member name="M:SafeOrbit.Memory.ISafeContainer.Verify">
            <summary>
                Verifies this instance.
            </summary>
        </member>
        <member name="T:SafeOrbit.Memory.LifeTime">
            <summary>
                Specifies the lifetime of a component/service.
            </summary>
            <seealso cref="T:SafeOrbit.Memory.SafeContainerServices.Instance.IInstanceProvider" />
        </member>
        <member name="F:SafeOrbit.Memory.LifeTime.Singleton">
            <summary>
                <see cref="F:SafeOrbit.Memory.LifeTime.Singleton" /> life time is a static, single instance of the class.
                <see cref="T:SafeOrbit.Memory.SafeContainer" /> returns the same instance for each request.
                Instances that are declared as <see cref="F:SafeOrbit.Memory.LifeTime.Singleton" /> should be thread-safe in a multi-threaded environment.
            </summary>
        </member>
        <member name="F:SafeOrbit.Memory.LifeTime.Transient">
            <summary>
                Transient are created each time they are requested.
                <see cref="T:SafeOrbit.Memory.SafeContainer" /> returns a new instance of the for after each request.
            </summary>
        </member>
        <member name="F:SafeOrbit.Memory.LifeTime.Unknown">
            <summary>
                Represents lifetime that's unknown to the SafeContainer.
            </summary>
        </member>
        <member name="T:SafeOrbit.Memory.SafeContainer">
            <summary>
                <see cref="T:SafeOrbit.Memory.SafeContainer" /> is a lightweight object container with memory protection.
            </summary>
            <seealso cref="T:SafeOrbit.Memory.ISafeContainer" />
            <seealso cref="T:System.IServiceProvider" />
            <seealso cref="T:SafeOrbit.Infrastructure.Protectable.IProtectable`1" />
            <seealso cref="T:SafeOrbit.Infrastructure.Protectable.ProtectableBase`1" />
            <seealso cref="T:SafeOrbit.Memory.SafeContainerServices.Instance.Providers.SafeInstanceProviderBase`1" />
            <seealso cref="T:SafeOrbit.Memory.Injection.InjectionDetector" />
        </member>
        <member name="M:SafeOrbit.Memory.SafeContainer.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SafeOrbit.Memory.SafeContainer" /> class.
            </summary>
        </member>
        <member name="M:SafeOrbit.Memory.SafeContainer.#ctor(SafeOrbit.Memory.SafeContainerProtectionMode)">
            <summary>
                Gets a new instance for <see cref="T:SafeOrbit.Memory.SafeContainer" />.
            </summary>
            <param name="protectionMode">The protection level of the factory.</param>
        </member>
        <member name="M:SafeOrbit.Memory.SafeContainer.Get``1">
            <summary>
                Gets the requested component/service.
            </summary>
            <typeparam name="TComponent">The type of the the component.</typeparam>
            <returns>Requested component.</returns>
            <exception cref="T:System.ArgumentException"><see cref="M:SafeOrbit.Memory.SafeContainer.Verify" /> is not called.</exception>
            <exception cref="T:SafeOrbit.Exceptions.MemoryInjectionException">If the object has been changed after last stamp.</exception>
            <exception cref="T:SafeOrbit.Exceptions.MemoryInjectionException">If the object has been changed after last stamp.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If the <typeparamref name="TComponent" /> is not registered.</exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeContainer.Register``1(SafeOrbit.Memory.LifeTime)">
            <summary>
                Registers the specified life time.
            </summary>
            <typeparam name="TImplementation">The type of the t implementation.</typeparam>
            <param name="lifeTime">The life time.</param>
        </member>
        <member name="M:SafeOrbit.Memory.SafeContainer.Verify">
            <exception cref="T:System.ArgumentException">If no type is registered in the current <see cref="T:SafeOrbit.Memory.SafeContainer" /> instance.</exception>
            <exception cref="T:System.ArgumentException">If the instance of <see cref="T:SafeOrbit.Memory.SafeContainer" /> is already verified.</exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeContainer.Register``2(System.Func{``1},SafeOrbit.Memory.LifeTime)">
            <summary>
                Registers a component with an implantation from a custom <see cref="T:System.Func`1" />.
            </summary>
            <typeparam name="TComponent">The type of the component.</typeparam>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="instanceInitializer">The instance getter.</param>
            <param name="lifeTime">The life time.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instanceInitializer" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeContainer.GetService(System.Type)">
            <inheritdoc />
            <exception cref="T:System.ArgumentException"><see cref="M:SafeOrbit.Memory.SafeContainer.Verify" /> is not called.</exception>
            <exception cref="T:SafeOrbit.Exceptions.MemoryInjectionException">If the object has been changed after last stamp.</exception>
            <exception cref="T:SafeOrbit.Exceptions.MemoryInjectionException">If the object has been changed after last stamp.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If the <paramref name="serviceType" /> is not registered.</exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeContainer.Register``1(System.Func{``0},SafeOrbit.Memory.LifeTime)">
            <inheritdoc />
            <summary>
                Registers a component with a custom <see cref="T:System.Func`1" />.
            </summary>
            <typeparam name="TComponent">The type of the component.</typeparam>
            <param name="instanceInitializer">The instance getter.</param>
            <param name="lifeTime">The life time.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instanceInitializer" /> is <see langword="null" />.</exception>
        </member>
        <member name="P:SafeOrbit.Memory.SafeContainer.AlertChannel">
            <summary>
                Gets or sets the alert channel for the inner <see cref="T:SafeOrbit.Memory.IInjectionDetector" />.
            </summary>
            <seealso cref="T:SafeOrbit.Memory.InjectionServices.IAlerts" />
            <seealso cref="T:SafeOrbit.Memory.IInjectionDetector" />
            <seealso cref="P:SafeOrbit.Memory.SafeContainer.CanAlert" />
            <value>The alert channel.</value>
        </member>
        <member name="P:SafeOrbit.Memory.SafeContainer.CanAlert">
            <inheritdoc />
            <summary>
                Gets if this instance is allowed to alert via <see cref="P:SafeOrbit.Memory.SafeContainer.AlertChannel" />.
            </summary>
            <seealso cref="T:SafeOrbit.Memory.InjectionServices.IAlerts" />
            <seealso cref="T:SafeOrbit.Memory.IInjectionDetector" />
            <seealso cref="P:SafeOrbit.Memory.SafeContainer.AlertChannel" />
            <value>If this instance is allowed to alert.</value>
        </member>
        <member name="M:SafeOrbit.Memory.SafeContainer.ChangeProtectionMode(SafeOrbit.Infrastructure.Protectable.IProtectionChangeContext{SafeOrbit.Memory.SafeContainerProtectionMode})">
            <summary>
                Changes the protection mode of the inner dictionary and its values.
            </summary>
        </member>
        <member name="T:SafeOrbit.Memory.SafeContainerProtectionMode">
            <summary>
                Protection levels for <see cref="T:SafeOrbit.Memory.ISafeContainer" /> instances.
            </summary>
            <seealso cref="T:SafeOrbit.Memory.ISafeContainer" />
        </member>
        <member name="F:SafeOrbit.Memory.SafeContainerProtectionMode.FullProtection">
            <summary>
                Protection for both state and code of its instances.
                It's slowest and the safest mode.
                <seealso cref="F:SafeOrbit.Memory.InjectionType.CodeAndVariableInjection" />
                <seealso cref="T:SafeOrbit.Memory.IInjectionDetector" />
            </summary>
        </member>
        <member name="F:SafeOrbit.Memory.SafeContainerProtectionMode.NonProtection">
            <summary>
                No protection for either the code or the state of the objects.
                It's much faster than <see cref="F:SafeOrbit.Memory.SafeContainerProtectionMode.FullProtection" /> but provides no security against injections.
            </summary>
        </member>
        <member name="T:SafeOrbit.Memory.SafeContainerWrapper`1">
            <summary>
                <see cref="T:SafeOrbit.IFactory`1" /> implementation, using <see cref="T:SafeOrbit.Memory.ISafeContainer" />.
            </summary>
            <typeparam name="TComponent">The type of the component.</typeparam>
            <seealso cref="T:SafeOrbit.IFactory`1" />
        </member>
        <member name="T:SafeOrbit.Memory.SafeMemoryStream">
            <summary>
                Creates a stream with no backing store (ephemeral memory). The buffer will be deleted after it's read or written.
            </summary>
            <remarks>
                <p>
                    This is very similar to a <see cref="T:System.IO.MemoryStream" />, except, once data has been read from the
                    <see cref="T:SafeOrbit.Memory.SafeMemoryStream" />, it disappears.  You cannot seek, you cannot get or set position.
                    If you write to the <see cref="T:SafeOrbit.Memory.SafeMemoryStream" />, the data is written to the end, and and when you read, the
                    beginning moves closer to the end.
                </p>
                <p>Length tells you how many bytes are currently in memory.</p>
                <p>
                    After calling <see cref="M:SafeOrbit.Memory.SafeMemoryStream.Close" />, the <see cref="T:SafeOrbit.Memory.SafeMemoryStream" /> cannot be written to
                    anymore, but it can still be read from.
                </p>
                <p>
                    The writer should call <see cref="M:SafeOrbit.Memory.SafeMemoryStream.Close" /> when it's done writing.
                    The reader may optionally call <see cref="M:SafeOrbit.Memory.SafeMemoryStream.Close" /> when it's done reading.
                </p>
                <p>
                    After <see cref="M:SafeOrbit.Memory.SafeMemoryStream.Close" /> has been called, the reader may read up to the number of bytes
                    available, and subsequent calls to <see cref="M:SafeOrbit.Memory.SafeMemoryStream.Read(System.Byte[],System.Int32,System.Int32)" />
                    will return <c>0</c>.  <see cref="M:SafeOrbit.Memory.SafeMemoryStream.Read(System.Byte[],System.Int32,System.Int32)" /> will never return <c>0</c>, until
                    after <see cref="M:SafeOrbit.Memory.SafeMemoryStream.Close" /> has been called, and all the bytes have been
                    read.
                </p>
            </remarks>
            <seealso cref="T:System.IO.Stream" />
            <seealso cref="M:SafeOrbit.Memory.SafeMemoryStream.Close" />
            <seealso cref="M:SafeOrbit.Memory.SafeMemoryStream.Read(System.Byte[],System.Int32,System.Int32)" />
        </member>
        <member name="M:SafeOrbit.Memory.SafeMemoryStream.#ctor">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:SafeOrbit.Memory.SafeMemoryStream" /> class.
            </summary>
        </member>
        <member name="P:SafeOrbit.Memory.SafeMemoryStream.Position">
            <exception cref="T:System.NotSupportedException" accessor="set">
                <see cref="P:SafeOrbit.Memory.SafeMemoryStream.Position" /> is not supported for
                <see cref="T:SafeOrbit.Memory.SafeMemoryStream" />.
            </exception>
            <exception cref="T:System.NotSupportedException" accessor="get">
                <see cref="P:SafeOrbit.Memory.SafeMemoryStream.Position" /> is not supported for
                <see cref="T:SafeOrbit.Memory.SafeMemoryStream" />.
            </exception>
        </member>
        <member name="P:SafeOrbit.Memory.SafeMemoryStream.IoException">
            <exception cref="T:System.NotSupportedException">
                <see cref="M:SafeOrbit.Memory.SafeMemoryStream.SetLength(System.Int64)" /> is not supported for <see cref="T:SafeOrbit.Memory.SafeMemoryStream" />
            </exception>
            <summary>
                If you set <see cref="P:SafeOrbit.Memory.SafeMemoryStream.IoException" /> to true, subsequent calls to <see cref="M:SafeOrbit.Memory.SafeMemoryStream.Read(System.Byte[],System.Int32,System.Int32)" /> will throw
                <see cref="T:System.IO.IOException" />.
                You can only set to true.  Once you set to true, you cannot set to false.  There is no undo.
                Throws <see cref="T:System.ArgumentException" /> if you attempt to set false.  (Don't do it.)
            </summary>
            <exception cref="T:System.ArgumentException" accessor="set">When <see cref="P:SafeOrbit.Memory.SafeMemoryStream.IoException" /> is set to true.</exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <exception cref="T:System.NotSupportedException">
                <see cref="M:SafeOrbit.Memory.SafeMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)" /> is not supported for <see cref="T:SafeOrbit.Memory.SafeMemoryStream" />
            </exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeMemoryStream.SetLength(System.Int64)">
            <exception cref="T:System.NotSupportedException">This method is not supported on a <see cref="T:SafeOrbit.Memory.SafeMemoryStream" /></exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeMemoryStream.Flush">
            <exception cref="T:System.IO.IOException">If <see cref="P:SafeOrbit.Memory.SafeMemoryStream.IoException" /> is true.</exception>
            <exception cref="T:System.Threading.AbandonedMutexException">
                The wait completed because a thread exited without releasing a mutex. This
                exception is not thrown on Windows 98 or Windows Millennium Edition.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                The current instance is a transparent proxy for a
                <see cref="T:System.Threading.WaitHandle" /> in another application domain.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The current instance has been disposed. </exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Reads from the buffer and deletes the read data from the <paramref name="buffer" />.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When <paramref name="buffer" />'s length is out of range.</exception>
            <exception cref="P:SafeOrbit.Memory.SafeMemoryStream.IoException">If <see cref="P:SafeOrbit.Memory.SafeMemoryStream.IoException" /> is true.</exception>
            <exception cref="T:System.ArgumentException">Condition.</exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Reads from the buffer and deletes the read data from the buffer.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When <paramref name="buffer" />'s length is out of range.</exception>
            <exception cref="P:SafeOrbit.Memory.SafeMemoryStream.IoException">If <see cref="P:SafeOrbit.Memory.SafeMemoryStream.IoException" /> is true.</exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeMemoryStream.Dispose(System.Boolean)">
            <summary>
                Releases the unmanaged resources used by the <see cref="T:SafeOrbit.Memory.SafeMemoryStream" /> and optionally releases the managed
                resources.
            </summary>
            <param name="disposing">
                true to release both managed and unmanaged resources; false to release only unmanaged
                resources.
            </param>
        </member>
        <member name="M:SafeOrbit.Memory.SafeMemoryStream.Close">
            <inheritdoc />
            <summary>
            Closes the instance. The reader may read up to the number of bytes available, and subsequent calls to <see cref="M:SafeOrbit.Memory.SafeMemoryStream.Read(System.Byte[],System.Int32,System.Int32)" /> will return <c>0</c>.
            </summary>
        </member>
        <member name="M:SafeOrbit.Memory.SafeMemoryStream.EnsureReadOrWriteParameters(System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When <paramref name="buffer" />'s length is out of range.</exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeMemoryStream.EnsureThatIoExceptionIsNotTrue">
            <summary>
                Ensures the that <see cref="F:SafeOrbit.Memory.SafeMemoryStream._ioException" /> is not <c>TRUE</c>. Throws if it is <c>TRUE</c>.
            </summary>
            <exception cref="T:System.IO.IOException">If <see cref="P:SafeOrbit.Memory.SafeMemoryStream.IoException" /> is <c>TRUE</c>.</exception>
        </member>
        <member name="T:SafeOrbit.Memory.ISafeObject`1">
            <summary>
                Abstracts an object that can detect the injections to itself.
            </summary>
            <typeparam name="TObject">The type of the the class.</typeparam>
            <seealso cref="T:SafeOrbit.Infrastructure.Protectable.IProtectable`1" />
            <seealso cref="T:SafeOrbit.Memory.InjectionServices.IAlerts" />
            <seealso cref="T:System.IDisposable" />
            <seealso cref="T:SafeOrbit.Memory.SafeObjectProtectionMode" />
        </member>
        <member name="P:SafeOrbit.Memory.ISafeObject`1.IsReadOnly">
            <summary>
                Gets a value indicating whether this instance is modifiable.
            </summary>
            <value><c>true</c> if this instance is modifiable; otherwise, <c>false</c>.</value>
            <seealso cref="M:SafeOrbit.Memory.ISafeObject`1.MakeReadOnly" />
        </member>
        <member name="P:SafeOrbit.Memory.ISafeObject`1.Object">
            <summary>
                Gets the object.
            </summary>
            <value>The object.</value>
        </member>
        <member name="M:SafeOrbit.Memory.ISafeObject`1.MakeReadOnly">
            <summary>
                Closes this instance to any kind of changes.
            </summary>
            <seealso cref="P:SafeOrbit.Memory.ISafeObject`1.IsReadOnly" />
        </member>
        <member name="M:SafeOrbit.Memory.ISafeObject`1.ApplyChanges(System.Action{`0})">
            <summary>
                Verifies the last changes on the object.
            </summary>
            <seealso cref="P:SafeOrbit.Memory.ISafeObject`1.IsReadOnly" />
            <param name="modification">The modification.</param>
        </member>
        <member name="T:SafeOrbit.Memory.SafeObject`1">
            <summary>
                <p>
                    <see cref="T:SafeOrbit.Memory.SafeObject`1" /> uses <seealso cref="T:SafeOrbit.Memory.Injection.InjectionDetector" /> and tracks any outside
                    modifications of the <typeparamref name="TObject" />.
                </p>
                <p>
                    Provides thread safe access to its inner object.
                </p>
                <p>
                    <b>Important:</b> Use only <see cref="M:SafeOrbit.Memory.SafeObject`1.ApplyChanges(System.Action{`0})" /> to change the state of your object. It'll authorize your
                    access and apply them securely.
                </p>
                <p>
                    Its security is based on <see cref="T:SafeOrbit.Memory.IInjectionDetector" /> and alerts if unknown changes to the object occurs
                    based on current <see cref="T:SafeOrbit.Memory.SafeObjectProtectionMode" />.
                </p>
            </summary>
            <example>
                <p>
                    Usage:
                    <code>
                      var safeObject = new SafeObject&lt;Customer&gt;(/*leaving default instance empty in constructor to get a new instance*/);
                      //you can alternatively use an existing instance to protect: new SafeObject&lt;TObject&gt;(new InitialSafeObjectSettings(initialValue, true));
                      //each change to the object's state or code must be using ApplyChanges
                      safeObject.ApplyChanges((customer) => customer.Id = 5);
                      //retrieve safe data
                      var customerId = safeObject.Object.Id; //returns 5 or alerts if any injection is detected
                      }
                </code>
                </p>
                <p>
                    Advanced settings :
                    <code>
                      //if the object's Id property becomes 0 by any non-applied change,
                      //the SafeObject instance will alert a memory injection depending on its protection mode.
                      //safeObject.SetProtectionMode(SafeObjectProtectionMode.StateAndCode); //changes its protection mode to no protection
                      //you can change the alert channel:
                      safeObject.AlertChannel = InjectionAlertChannel.DebugWrite; //any detected injections will be alerted using the alert channel
                      safeObject.SetProtectionMode(SafeObjectProtectionMode.NoProtection); //stops the protection of object,
                      //SafeObject will never alert when it's not protected.
                      var willAlert = safeObject.CanAlert; //returns false as the instance will only alert when it's protected.
                </code>
                </p>
            </example>
            <seealso cref="T:SafeOrbit.Memory.SafeObjectProtectionMode" />
            <seealso cref="T:SafeOrbit.Memory.InjectionServices.IAlerts" />
            <seealso cref="T:SafeOrbit.Memory.ISafeObject`1" />
            <seealso cref="T:SafeOrbit.Infrastructure.Protectable.IProtectable`1" />
            <seealso cref="T:System.IDisposable" />
            <seealso cref="T:SafeOrbit.Memory.IInjectionDetector" />
            <seealso cref="T:SafeOrbit.Memory.Injection.InjectionDetector" />
            <seealso cref="T:SafeOrbit.Exceptions.MemoryInjectionException" />
            <seealso cref="M:SafeOrbit.Memory.SafeObject`1.ApplyChanges(System.Action{`0})" />
        </member>
        <member name="M:SafeOrbit.Memory.SafeObject`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SafeOrbit.Memory.SafeObject`1" /> class using default
                <see cref="T:SafeOrbit.Memory.IInitialSafeObjectSettings" /> and <see cref="T:SafeOrbit.Memory.InjectionServices.InjectionAlertChannel" />.
            </summary>
            <seealso cref="T:SafeOrbit.Memory.IInitialSafeObjectSettings" />
            <seealso cref="T:SafeOrbit.Memory.InjectionServices.InjectionAlertChannel" />
            <seealso cref="P:SafeOrbit.Defaults.SafeObjectSettings" />
            <seealso cref="F:SafeOrbit.Defaults.AlertChannel" />
        </member>
        <member name="M:SafeOrbit.Memory.SafeObject`1.#ctor(SafeOrbit.Memory.IInitialSafeObjectSettings)">
            <summary>
                Initializes a new instance of the <see cref="T:SafeOrbit.Memory.SafeObject`1" /> class using custom settings.
            </summary>
            <param name="settings">The settings.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="settings" /> is <see langword="null" /> </exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeObject`1.#ctor(SafeOrbit.Memory.IInitialSafeObjectSettings,SafeOrbit.Memory.IInjectionDetector)">
            <summary>
                <p>Initializes a new instance of the <see cref="T:SafeOrbit.Memory.SafeObject`1" /> class.</p>
            </summary>
            <param name="settings">The settings.</param>
            <param name="injectionDetector">The injection protector.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="settings" /> is not null and <see cref="P:SafeOrbit.Memory.InitialSafeObjectSettings.InitialValue" /> is not a type
                of <typeparamref name="TObject" />.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <p><paramref name="injectionDetector" /> is <see langword="null" />.</p>
                <p>Initial object value from <paramref name="settings" /> is null or cannot be casted to <typeparamref name="TObject" /></p>
            </exception>
        </member>
        <member name="P:SafeOrbit.Memory.SafeObject`1.AlertChannel">
            <inheritdoc />
            <summary>
                Gets or sets the alert channel for the inner <see cref="T:SafeOrbit.Memory.IInjectionDetector" />.
            </summary>
            <seealso cref="T:SafeOrbit.Memory.InjectionServices.IAlerts" />
            <seealso cref="T:SafeOrbit.Memory.IInjectionDetector" />
            <seealso cref="P:SafeOrbit.Memory.SafeObject`1.CanAlert" />
            <value>The alert channel.</value>
        </member>
        <member name="P:SafeOrbit.Memory.SafeObject`1.CanAlert">
            <inheritdoc />
            <summary>
                Gets if this instance is allowed to alert via <see cref="P:SafeOrbit.Memory.SafeObject`1.AlertChannel" />.
            </summary>
            <seealso cref="T:SafeOrbit.Memory.InjectionServices.IAlerts" />
            <seealso cref="T:SafeOrbit.Memory.IInjectionDetector" />
            <seealso cref="P:SafeOrbit.Memory.SafeObject`1.AlertChannel" />
            <value>If this instance is allowed to alert.</value>
        </member>
        <member name="P:SafeOrbit.Memory.SafeObject`1.Object">
            <inheritdoc />
            <exception cref="T:SafeOrbit.Exceptions.MemoryInjectionException" accessor="get">If the object has been changed after last stamp.</exception>
        </member>
        <member name="P:SafeOrbit.Memory.SafeObject`1.IsReadOnly">
            <inheritdoc />
            <summary>
                Gets a value indicating whether this instance is modifiable.
            </summary>
            <value><c>true</c> if this instance is modifiable; otherwise, <c>false</c>.</value>
            <seealso cref="M:SafeOrbit.Memory.SafeObject`1.MakeReadOnly" />
        </member>
        <member name="M:SafeOrbit.Memory.SafeObject`1.MakeReadOnly">
            <inheritdoc />
            <summary>
                Closes this instance to any kind of changes.
            </summary>
            <seealso cref="P:SafeOrbit.Memory.SafeObject`1.IsReadOnly" />
        </member>
        <member name="M:SafeOrbit.Memory.SafeObject`1.ApplyChanges(System.Action{`0})">
            <summary>
                Verifies the changes to the state and code of the instance.
                The object should only be modified with this method to authorize the modification.
            </summary>
            <exception cref="T:SafeOrbit.Exceptions.ReadOnlyAccessForbiddenException">This instance of <typeparamref name="TObject" /> is marked as ReadOnly.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="modification" /> is <see langword="null" /> </exception>
            <seealso cref="P:SafeOrbit.Memory.SafeObject`1.IsReadOnly" />
        </member>
        <member name="M:SafeOrbit.Memory.SafeObject`1.VerifyChangesInternal(System.Action{`0},System.Boolean)">
            <summary>
                Verifies the changes to the inner <see cref="T:SafeOrbit.Memory.Injection.InjectionDetector" />.
            </summary>
            <param name="modification">[Optional] The modification to be run .</param>
            <param name="alertUnnotifiedChanges">This method alerts unverified changes.</param>
        </member>
        <member name="M:SafeOrbit.Memory.SafeObject`1.GetObjectInternal(System.Boolean)">
            <summary>
            Gets internal object.
            </summary>
            <param name="alertUnnotifiedChanges">This method alerts unverified changes.</param>
            <exception cref="T:SafeOrbit.Exceptions.MemoryInjectionException" accessor="get">If the object has been changed after last stamp.</exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeObject`1.ThrowIfReadOnly">
            <exception cref="T:SafeOrbit.Exceptions.ReadOnlyAccessForbiddenException">This instance of <typeparamref name="TObject" /> is marked as ReadOnly.</exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeObject`1.ChangeProtectionMode(SafeOrbit.Infrastructure.Protectable.IProtectionChangeContext{SafeOrbit.Memory.SafeObjectProtectionMode})">
            <exception cref="T:System.NotSupportedException">
                <typeparamref name="TObject" />is a dictionary. Code protection for dictionary types are
                not yet supported.
            </exception>
        </member>
        <member name="T:SafeOrbit.Memory.SafeObjectProtectionMode">
            <summary>
                Different protection modes for a <see cref="T:SafeOrbit.Memory.ISafeObject`1" />
            </summary>
            <seealso cref="T:SafeOrbit.Memory.ISafeObject`1" />
        </member>
        <member name="F:SafeOrbit.Memory.SafeObjectProtectionMode.StateAndCode">
            <summary>
                Provides the maximum security by protecting the object against both state and code injections
            </summary>
        </member>
        <member name="F:SafeOrbit.Memory.SafeObjectProtectionMode.JustState">
            <summary>
                Provides protection against only state injections. This option should be selected if the code of the object is
                designed to change its  code dynamically. The type will be vulnerable to code injections.
            </summary>
        </member>
        <member name="F:SafeOrbit.Memory.SafeObjectProtectionMode.JustCode">
            <summary>
                Provides protection against only code injections. This option might be good if the object is a stateless class, or
                the data it's holding is not sensitive.
            </summary>
        </member>
        <member name="F:SafeOrbit.Memory.SafeObjectProtectionMode.NoProtection">
            <summary>
                Provides no protection / security.
                <b>Important : This option is completely un-safe and will disable injection scans.</b>
            </summary>
        </member>
        <member name="T:SafeOrbit.Memory.IInitialSafeObjectSettings">
            <summary>
                Abstraction of a class that holds some values for initial settings of <see cref="T:SafeOrbit.Memory.ISafeObject`1" />
            </summary>
            <seealso cref="T:SafeOrbit.Memory.ISafeObject`1" />
        </member>
        <member name="P:SafeOrbit.Memory.IInitialSafeObjectSettings.InitialValue">
            <summary>
                Gets or sets the initial instance for <see cref="T:SafeOrbit.Memory.ISafeObject`1" />
            </summary>
            <seealso cref="T:SafeOrbit.Memory.ISafeObject`1" />
            <seealso cref="T:SafeOrbit.Memory.SafeObjectProtectionMode" />
        </member>
        <member name="P:SafeOrbit.Memory.IInitialSafeObjectSettings.IsReadOnly">
            <summary>
                Gets or sets a value indicating whether the requested <see cref="T:SafeOrbit.Memory.ISafeObject`1" />  instance is modifiable
                after its created.
            </summary>
            <seealso cref="T:SafeOrbit.Memory.ISafeObject`1" />
            <seealso cref="T:SafeOrbit.Memory.SafeObjectProtectionMode" />
            <value><c>true</c> if this instance is read only; if modifiable, <c>false</c>.</value>
        </member>
        <member name="P:SafeOrbit.Memory.IInitialSafeObjectSettings.ProtectionMode">
            <summary>
                Gets or sets the initial protection mode of the <see cref="T:SafeOrbit.Memory.ISafeObject`1" /> instance.
            </summary>
            <seealso cref="T:SafeOrbit.Memory.ISafeObject`1" />
            <seealso cref="T:SafeOrbit.Memory.SafeObjectProtectionMode" />
            <value>The protection mode.</value>
        </member>
        <member name="T:SafeOrbit.Memory.InitialSafeObjectSettings">
            <summary>
                Initial settings for <see cref="T:SafeOrbit.Memory.SafeObject`1" /> instances
            </summary>
            <seealso cref="T:SafeOrbit.Memory.SafeObject`1" />
        </member>
        <member name="P:SafeOrbit.Memory.InitialSafeObjectSettings.InitialValue">
            <summary>
                Gets or sets the initial instance for <see cref="T:SafeOrbit.Memory.SafeObject`1" />
            </summary>
            <seealso cref="T:SafeOrbit.Memory.SafeObject`1" />
            <seealso cref="T:SafeOrbit.Memory.SafeObjectProtectionMode" />
        </member>
        <member name="P:SafeOrbit.Memory.InitialSafeObjectSettings.IsReadOnly">
            <summary>
                Gets or sets a value indicating whether the requested <see cref="T:SafeOrbit.Memory.SafeObject`1" />  instance is modifiable
                after its created.
            </summary>
            <seealso cref="T:SafeOrbit.Memory.SafeObject`1" />
            <seealso cref="T:SafeOrbit.Memory.SafeObjectProtectionMode" />
        </member>
        <member name="P:SafeOrbit.Memory.InitialSafeObjectSettings.ProtectionMode">
            <summary>
                Gets or sets the initial protection mode of the <see cref="T:SafeOrbit.Memory.SafeObject`1" /> instance.
            </summary>
            <seealso cref="T:SafeOrbit.Memory.SafeObject`1" />
            <seealso cref="T:SafeOrbit.Memory.SafeObjectProtectionMode" />
            <value>The protection mode.</value>
        </member>
        <member name="M:SafeOrbit.Memory.InitialSafeObjectSettings.#ctor(System.Object,System.Boolean,SafeOrbit.Memory.SafeObjectProtectionMode,SafeOrbit.Memory.InjectionServices.InjectionAlertChannel)">
            <summary>
            Initializes a new instance of the <see cref="T:SafeOrbit.Memory.InitialSafeObjectSettings"/> class.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="isReadOnly">if set to <c>false</c> the instance will be modifiable initially.</param>
            <param name="protectionMode">The initial protection mode.</param>
            <param name="alertChannel">Gets/sets the alert channel for the inner <see cref="T:SafeOrbit.Memory.IInjectionDetector"/></param>
        </member>
        <member name="P:SafeOrbit.Memory.ISafeString.Length">
            <summary>
                Gets the number of characters in the current SafeString
                Disposed SafeString returns 0
            </summary>
        </member>
        <member name="M:SafeOrbit.Memory.ISafeString.Append(SafeOrbit.Memory.ISafeBytes,SafeOrbit.Text.Encoding)">
            <summary>
                Append bytes of a single character
            </summary>
            <param name="character">SafeBytes object that contains bytes for one single char</param>
            <param name="encoding">Encoding type that bytes are stored. Default = little endian UTF16</param>
        </member>
        <member name="M:SafeOrbit.Memory.ISafeString.Append(System.String)">
            <summary>
                Adds string that's not important for memory leaks. Will be seen in memory.
            </summary>
            <param name="text">String to append</param>
        </member>
        <member name="M:SafeOrbit.Memory.ISafeString.AppendLine">
            <summary>
                Appends the default line terminator (Environment.NewLine) to the end of the
                current SafeString object
            </summary>
        </member>
        <member name="M:SafeOrbit.Memory.ISafeString.Remove(System.Int32,System.Int32)">
            <param name="startIndex">Position of char to remove</param>
            <param name="count">[Optional] Default = 1 single character</param>
        </member>
        <member name="M:SafeOrbit.Memory.ISafeString.Clear">
            <summary>
                Removes all data
            </summary>
        </member>
        <member name="T:SafeOrbit.Memory.ISafeStringToStringMarshaler">
            <summary>
                Abstract a marshaler that can convert a <see cref="T:SafeOrbit.Memory.ISafeString" /> into a <see cref="T:System.String" /> until it is
                disposed
            </summary>
            <seealso cref="T:System.IDisposable" />
            <seealso cref="T:SafeOrbit.Memory.ISafeString" />
            <seealso cref="P:SafeOrbit.Memory.ISafeStringToStringMarshaler.SafeString" />
            <seealso cref="T:System.String" />
        </member>
        <member name="P:SafeOrbit.Memory.ISafeStringToStringMarshaler.SafeString">
            <summary>
                Gets or sets the safe string.
            </summary>
            <value>The safe string.</value>
        </member>
        <member name="P:SafeOrbit.Memory.ISafeStringToStringMarshaler.String">
            <summary>
                Gets the disposable string.
            </summary>
            <value>The disposable string.</value>
        </member>
        <member name="M:SafeOrbit.Memory.SafeString.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SafeOrbit.Memory.SafeString" /> class.
            </summary>
        </member>
        <member name="M:SafeOrbit.Memory.SafeString.Append(System.Char)">
            <exception cref="T:System.ObjectDisposedException">Throws if the <see cref="T:SafeOrbit.Memory.SafeString" /> instance is disposed.</exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeString.Append(System.String)">
            <inheritdoc />
            <summary>
                Appends a <see cref="T:System.String" /> that's already revealed in the memory.
            </summary>
            <param name="text">Non-safe <see cref="T:System.String" /> that's already revealed in the memory</param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="text" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeString.Append(SafeOrbit.Memory.ISafeBytes,SafeOrbit.Text.Encoding)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">
                <paramref name="character" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                If position is less than zero or higher than the length.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Throws if the SafeString instance is disposed.
            </exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeString.Append(SafeOrbit.Memory.ISafeString)">
            <exception cref="T:System.ArgumentNullException">
                <paramref name="safeString" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Throws if the SafeString instance is disposed.
            </exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeString.AppendLine">
            <inheritdoc />
            <exception cref="T:System.ObjectDisposedException">Throws if the SafeString instance is disposed</exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeString.Insert(System.Int32,System.Char)">
            <exception cref="T:System.ObjectDisposedException">Throws if the <see cref="T:SafeOrbit.Memory.ISafeBytes" /> instance is disposed</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is not a valid index.</exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeString.Insert(System.Int32,SafeOrbit.Memory.ISafeBytes,SafeOrbit.Text.Encoding)">
            <exception cref="T:System.ArgumentNullException">
                <paramref name="textBytes" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Throws if the SafeString instance is disposed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Throws if <paramref name="textBytes" /> is less than zero or higher than the length.
            </exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeString.GetAsSafeBytes(System.Int32)">
            <exception cref="T:System.ObjectDisposedException">Throws if the <see cref="T:SafeOrbit.Memory.SafeString" /> instance is disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if the <see cref="T:SafeOrbit.Memory.SafeString" /> instance is empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index" /> is not a valid index.
            </exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeString.GetAsChar(System.Int32)">
            <exception cref="T:System.ObjectDisposedException">Throws if the <see cref="T:SafeOrbit.Memory.SafeString" /> instance is disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Throws if the <see cref="T:SafeOrbit.Memory.SafeString" /> instance is empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Throws if <paramref name="index" /> is less than zero, higher than/equals
                to the length.
            </exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeString.Remove(System.Int32,System.Int32)">
            <exception cref="T:System.ArgumentOutOfRangeException">
                Throws when <paramref name="startIndex" /> is out of range.
                Throws when <paramref name="count" /> is less than one.
                Throws when the total of <paramref name="startIndex" /> and <paramref name="count" /> is higher than lenth.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                Throws if the <see cref="T:SafeOrbit.Memory.SafeString" /> instance is disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                Throws if the <see cref="T:SafeOrbit.Memory.SafeString" /> instance is empty.
            </exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeString.Clear">
            <exception cref="T:System.ObjectDisposedException">Throws if the <see cref="T:SafeOrbit.Memory.SafeString" /> instance is disposed</exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeString.ToSafeBytes">
            <exception cref="T:System.ObjectDisposedException">Throws if the <see cref="T:SafeOrbit.Memory.SafeString" /> instance is disposed</exception>
            <exception cref="T:System.InvalidOperationException">Throws if the <see cref="T:SafeOrbit.Memory.SafeString" /> instance is empty.</exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeString.DeepClone">
            <inheritdoc />
            <exception cref="T:System.ObjectDisposedException">Throws if the <see cref="T:SafeOrbit.Memory.SafeString" /> instance is disposed</exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeString.ShallowClone">
            <exception cref="T:System.ObjectDisposedException">Throws if the <see cref="T:SafeOrbit.Memory.SafeString" /> instance is disposed</exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeString.EnsureNotDisposed">
            <exception cref="T:System.ObjectDisposedException">Throws if the <see cref="T:SafeOrbit.Memory.SafeString" /> instance is disposed.</exception>
        </member>
        <member name="M:SafeOrbit.Memory.SafeString.EnsureNotEmpty">
            <exception cref="T:System.InvalidOperationException">Throws if the <see cref="T:SafeOrbit.Memory.SafeString" /> instance is empty.</exception>
        </member>
        <member name="T:SafeOrbit.Memory.SafeStringToStringMarshaler">
            <summary>
                <p>Lets you use the SecureString inside SafeString until it's disposed</p>
                <p>Creates an allocated string in the memory after setting its <see cref="P:SafeOrbit.Memory.SafeStringToStringMarshaler.SafeString" /> property.</p>
                <p>The place and the string is removed from the memory after disposing it.</p>
            </summary>
            <remarks>
                <p>
                    Based on a marshaler for SecureString :
                    https://github.com/hilalsaim/sambapos/blob/master/Samba.Infrastructure/SecureStringToStringMarshaller.cs
                </p>
            </remarks>
            <example>
                <code>
                      using(var sm = new SafeStringToStringMarshaler(safeString))
                      {
                        // Use sm.String here.  While in the 'using' block, the string is accessible
                        // but pinned in memory.  When the 'using' block terminates, the string is zeroed
                        // out for security, and garbage collected as usual.
                      }
                </code>
            </example>
        </member>
        <member name="M:SafeOrbit.Memory.SafeStringToStringMarshaler.#ctor">
            <summary>
                <p>Initializes a new instance of the <see cref="T:SafeOrbit.Memory.SafeStringToStringMarshaler" /> class.</p>
                <p>
                    You need to set <see cref="P:SafeOrbit.Memory.SafeStringToStringMarshaler.SafeString" /> explicitly to get <see cref="P:SafeOrbit.Memory.SafeStringToStringMarshaler.String" /> property for the given
                    <see cref="T:SafeOrbit.Memory.ISafeString" />
                </p>
            </summary>
        </member>
        <member name="M:SafeOrbit.Memory.SafeStringToStringMarshaler.#ctor(SafeOrbit.Memory.ISafeString)">
            <summary>
                Initializes a new instance of the <see cref="T:SafeOrbit.Memory.SafeStringToStringMarshaler" /> class using a
                <see cref="T:SafeOrbit.Memory.ISafeString" />. Plain data of the <paramref name="safeString" /> will be available in
                <see cref="P:SafeOrbit.Memory.SafeStringToStringMarshaler.String" /> property until this instance is disposed.
            </summary>
            <param name="safeString">The safe string to decrypt.</param>
        </member>
        <member name="P:SafeOrbit.Memory.SafeStringToStringMarshaler.SafeString">
            <inheritdoc />
            <summary>
                Gets or sets the safe string. Setting a new SafeString will automatically update the String property.
            </summary>
            <value>
                The safe string that should be converted to a string.
            </value>
            <exception cref="T:System.ArgumentNullException" accessor="set"><paramref name="value" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ObjectDisposedException" accessor="set">Throws when <paramref name="value" /> is disposed.</exception>
        </member>
        <member name="P:SafeOrbit.Memory.SafeStringToStringMarshaler.String">
            <inheritdoc />
            <summary>
                Gets or sets the string representation of the SafeString object.
                This string will be cleared from the memory when the class is disposed.
            </summary>
            <value>
                The string.
            </value>
        </member>
        <member name="M:SafeOrbit.Memory.SafeStringToStringMarshaler.UpdateStringValue">
            <summary>
                Updates the string value from previously set SafeString.
            </summary>
        </member>
        <member name="T:SafeOrbit.Text.Encoding">
            <summary>
                Supported character encodings
            </summary>
        </member>
        <member name="F:SafeOrbit.Text.Encoding.Ascii">
            <summary>
                ASCII stands for American Standard Code for Information Interchange. Computers can only understand numbers, so an
                ASCII code is the numerical representation of a character such as 'a' or '@' or an action of some sort.
            </summary>
        </member>
        <member name="F:SafeOrbit.Text.Encoding.Utf16BigEndian">
            <summary>
                16-bit Unicode Transformation Format with big endian byte order.
            </summary>
        </member>
        <member name="F:SafeOrbit.Text.Encoding.Utf16LittleEndian">
            <summary>
                16-bit Unicode Transformation Format with little endian byte order.
            </summary>
        </member>
        <member name="T:SafeOrbit.Text.ITextService">
            <summary>
                Defines conversation methods for texts.
            </summary>
            <seealso cref="T:SafeOrbit.Text.Encoding" />
        </member>
        <member name="M:SafeOrbit.Text.ITextService.Convert(SafeOrbit.Text.Encoding,SafeOrbit.Text.Encoding,System.Byte[])">
            <summary>
                Converts an entire byte array from one encoding to another.
            </summary>
            <param name="sourceEncoding">The encoding format of <paramref name="bytes" /></param>
            <param name="destinationEncoding">The target encoding format.</param>
            <param name="bytes">The bytes to convert.</param>
            <returns>
                An array of type <see cref="T:System.Byte" /> containing the results of converting <paramref name="bytes" /> from
                <paramref name="sourceEncoding" /> to <paramref name="destinationEncoding" />.
            </returns>
        </member>
        <member name="M:SafeOrbit.Text.ITextService.GetSafeString(System.Byte[],SafeOrbit.Text.Encoding)">
            <summary>
                Decodes all the bytes in the specified byte array into a <see cref="T:SafeOrbit.Memory.ISafeString" />.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <param name="encoding">The encoding of the characters in the given byte array.</param>
            <returns><see cref="T:SafeOrbit.Memory.ISafeString" /> instance containing the decoded representation of a given byte array.</returns>
        </member>
        <member name="M:SafeOrbit.Text.ITextService.GetChars(System.Byte[],SafeOrbit.Text.Encoding)">
            <summary>
                Decodes all the bytes in the specified byte array into a set of characters.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <param name="encoding">The encoding of the characters in the given byte array.</param>
            <returns>A character array containing the decoded representation of a given byte array..</returns>
        </member>
        <member name="M:SafeOrbit.Text.ITextService.GetString(System.Byte[],SafeOrbit.Text.Encoding)">
            <summary>
                Decodes a sequence of bytes into a string.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <param name="encoding">The encoding of the characters in the given byte array.</param>
            <returns>A string that contains the results of decoding the specified sequence of bytes.</returns>
        </member>
        <member name="M:SafeOrbit.Text.ITextService.GetBytes(System.String,SafeOrbit.Text.Encoding)">
            <summary>
                Encodes all the characters in the specified string into a sequence of bytes.
            </summary>
            <param name="text">The string containing the characters to encode.</param>
            <param name="encoding">The encoding of the given text.</param>
            <returns>A byte array containing the results of encoding the specified set of characters.</returns>
        </member>
        <member name="M:SafeOrbit.Text.ITextService.GetBytes(System.Char,SafeOrbit.Text.Encoding)">
            <summary>
                Encodes the specified character into a sequence of bytes.
            </summary>
            <param name="char">The character to encode.</param>
            <param name="encoding">The encoding of the given character.</param>
            <returns>A byte array containing the results of encoding the given character.</returns>
        </member>
        <member name="M:SafeOrbit.Text.ITextService.GetBytes(System.Char[],SafeOrbit.Text.Encoding)">
            <summary>
                Encodes the characters in the specified character array into a sequence of bytes.
            </summary>
            <param name="chars">The character array containing the characters to encode.</param>
            <param name="encoding">The encoding of the given characters.</param>
            <returns>A byte array containing the encoded representation of the given character array.</returns>
        </member>
        <member name="T:SafeOrbit.Text.TextService">
            <summary>
                <see cref="T:SafeOrbit.Text.TextService" /> is a wrapper around <see cref="T:System.Text.Encoding" />.
            </summary>
            <remarks>
                <p><see cref="T:SafeOrbit.Text.TextService" /> is a stateless service.</p>
            </remarks>
            <seealso cref="T:SafeOrbit.Text.ITextService" />
            <seealso cref="T:System.Text.Encoding" />
        </member>
        <member name="F:SafeOrbit.Text.TextService.DefaultEncoding">
            <summary>
                The default encoding.
            </summary>
        </member>
        <member name="F:SafeOrbit.Text.TextService._safeStringFactory">
            <summary>
                Safe string factory to create <see cref="T:SafeOrbit.Memory.ISafeString" /> instances when using <see cref="M:SafeOrbit.Text.TextService.GetSafeString(System.Byte[],SafeOrbit.Text.Encoding)" /> method.
            </summary>
            <seealso cref="M:SafeOrbit.Text.TextService.GetSafeString(System.Byte[],SafeOrbit.Text.Encoding)" />
            <seealso cref="T:SafeOrbit.Text.ITextService" />
        </member>
        <member name="M:SafeOrbit.Text.TextService.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SafeOrbit.Text.TextService" /> class.
            </summary>
        </member>
        <member name="M:SafeOrbit.Text.TextService.#ctor(SafeOrbit.IFactory{SafeOrbit.Memory.ISafeString})">
            <summary>
                Initializes a new instance of the <see cref="T:SafeOrbit.Text.TextService" /> class.
            </summary>
            <param name="safeStringFactory">The safe string factory.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="safeStringFactory" /> is <see langword="null" /></exception>
        </member>
        <member name="M:SafeOrbit.Text.TextService.Convert(SafeOrbit.Text.Encoding,SafeOrbit.Text.Encoding,System.Byte[])">
            <summary>
                Converts an entire byte array from one encoding to another.
            </summary>
            <param name="sourceEncoding">The encoding format of <paramref name="bytes" /></param>
            <param name="destinationEncoding">The target encoding format.</param>
            <param name="bytes">The bytes to convert.</param>
            <returns>
                An array of type <see cref="T:System.Byte" /> containing the results of converting <paramref name="bytes" /> from
                <paramref name="sourceEncoding" /> to <paramref name="destinationEncoding" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes" /> is <see langword="null" /> or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <p><paramref name="sourceEncoding" /> must be defined in <seealso cref="T:SafeOrbit.Text.Encoding" /> enum.</p>
                <p><paramref name="destinationEncoding" /> must be defined in <seealso cref="T:SafeOrbit.Text.Encoding" /> enum.</p>
            </exception>
            <exception cref="T:System.Text.DecoderFallbackException">
                A fallback occurred (see https://msdn.microsoft.com/en-us/library/ms404377(v=vs.110).aspx , Character Encoding in
                the .NET Framework)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to
                <see cref="T:System.Text.DecoderExceptionFallback" />.
            </exception>
            <exception cref="T:System.Text.EncoderFallbackException">
                A fallback occurred (see https://msdn.microsoft.com/en-us/library/ms404377(v=vs.110).aspx , Character Encoding in
                the .NET Framework)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to
                <see cref="T:System.Text.EncoderExceptionFallback" />.
            </exception>
        </member>
        <member name="M:SafeOrbit.Text.TextService.GetBytes(System.String,SafeOrbit.Text.Encoding)">
            <summary>
                Encodes all the characters in the specified string into a sequence of bytes.
            </summary>
            <param name="text">The string containing the characters to encode.</param>
            <param name="encoding">The encoding of the given text.</param>
            <returns>A byte array containing the results of encoding the specified set of characters.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="text" /> is <see langword="null" /> or empty.</exception>
            <exception cref="T:System.Text.EncoderFallbackException">
                A fallback occurred (see https://msdn.microsoft.com/en-us/library/ms404377(v=vs.110).aspx , Character Encoding in
                the .NET Framework)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to
                <see cref="T:System.Text.EncoderExceptionFallback" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="encoding" /> must be defined in
                <seealso cref="T:SafeOrbit.Text.Encoding" /> enum.
            </exception>
        </member>
        <member name="M:SafeOrbit.Text.TextService.GetBytes(System.Char,SafeOrbit.Text.Encoding)">
            <summary>
                Encodes the specified character into a sequence of bytes.
            </summary>
            <param name="char">The character to encode.</param>
            <param name="encoding">The encoding of the given character.</param>
            <returns>A byte array containing the results of encoding the given character.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Throws if
                <paramref name="char" />
                is less than zero.
            </exception>
            <exception cref="T:System.Text.EncoderFallbackException">
                A fallback occurred (see https://msdn.microsoft.com/en-us/library/ms404377(v=vs.110).aspx , Character Encoding in
                the .NET Framework)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to
                <see cref="T:System.Text.EncoderExceptionFallback" />.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="char" />
                is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="encoding" /> must be defined in
                <seealso cref="T:SafeOrbit.Text.Encoding" /> enum.
            </exception>
        </member>
        <member name="M:SafeOrbit.Text.TextService.GetBytes(System.Char[],SafeOrbit.Text.Encoding)">
            <summary>
                Encodes the characters in the specified character array into a sequence of bytes.
            </summary>
            <param name="chars">The character array containing the characters to encode.</param>
            <param name="encoding">The encoding of the given characters.</param>
            <returns>A byte array containing the encoded representation of the given character array.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="chars" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Text.EncoderFallbackException">
                A fallback occurred (see https://msdn.microsoft.com/en-us/library/ms404377(v=vs.110).aspx , Character Encoding in
                the .NET Framework)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to
                <see cref="T:System.Text.EncoderExceptionFallback" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Throws if encoding type is not valid.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="encoding" /> must be defined in
                <seealso cref="T:SafeOrbit.Text.Encoding" /> enum.
            </exception>
        </member>
        <member name="M:SafeOrbit.Text.TextService.GetString(System.Byte[],SafeOrbit.Text.Encoding)">
            <summary>
                Decodes a sequence of bytes into a string.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <param name="encoding">The encoding of the characters in the given byte array.</param>
            <returns>A string that contains the results of decoding the specified sequence of bytes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes" /> is <see langword="null" /> or empty.</exception>
            <exception cref="T:System.ArgumentException">The byte array contains invalid encoding code points.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="encoding" /> must be defined in
                <seealso cref="T:SafeOrbit.Text.Encoding" /> enum.
            </exception>
            <exception cref="T:System.Text.DecoderFallbackException">
                A fallback occurred (see https://msdn.microsoft.com/en-us/library/ms404377(v=vs.110).aspx , Character Encoding in
                the .NET Framework)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to
                <see cref="T:System.Text.DecoderExceptionFallback" />.
            </exception>
        </member>
        <member name="M:SafeOrbit.Text.TextService.GetChars(System.Byte[],SafeOrbit.Text.Encoding)">
            <summary>
                Decodes all the bytes in the specified byte array into a set of characters.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <param name="encoding">The encoding of the characters in the given byte array.</param>
            <returns>A character array containing the decoded representation of a given byte array..</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes" /> is null or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="encoding" /> must be defined in
                <seealso cref="T:SafeOrbit.Text.Encoding" /> enum.
            </exception>
            <exception cref="T:System.Text.DecoderFallbackException">
                A fallback occurred (see https://msdn.microsoft.com/en-us/library/ms404377(v=vs.110).aspx , Character Encoding in
                the .NET Framework)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to
                <see cref="T:System.Text.DecoderExceptionFallback" />.
            </exception>
        </member>
        <member name="M:SafeOrbit.Text.TextService.GetSafeString(System.Byte[],SafeOrbit.Text.Encoding)">
            <summary>
                Decodes all the bytes in the specified byte array into a <see cref="T:SafeOrbit.Memory.ISafeString" />.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <param name="encoding">The encoding of the characters in the given byte array.</param>
            <returns><see cref="T:SafeOrbit.Memory.ISafeString" /> instance containing the decoded representation of a given byte array.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes" /> is null or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="encoding" /> must be defined in
                <seealso cref="T:SafeOrbit.Text.Encoding" /> enum.
            </exception>
            <exception cref="T:System.Text.DecoderFallbackException">
                A fallback occurred (see https://msdn.microsoft.com/en-us/library/ms404377(v=vs.110).aspx , Character Encoding in
                the .NET Framework)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to
                <see cref="T:System.Text.DecoderExceptionFallback" />.
            </exception>
            <seealso cref="F:SafeOrbit.Text.TextService._safeStringFactory" />
        </member>
        <member name="M:SafeOrbit.Text.TextService.GetEncodingObject(SafeOrbit.Text.Encoding)">
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="encoding" /> must be defined in
                <seealso cref="T:SafeOrbit.Text.Encoding" /> enum.
            </exception>
        </member>
        <member name="T:SafeOrbit.Defaults">
            <summary>
                Default settings for SafeOrbit classes.
            </summary>
        </member>
    </members>
</doc>
